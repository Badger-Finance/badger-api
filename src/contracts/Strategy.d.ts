/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface StrategyInterface extends ethers.utils.Interface {
  functions: {
    'BADGER_TREE()': FunctionFragment;
    'CVXCRV_VAULT()': FunctionFragment;
    'DELEGATE()': FunctionFragment;
    'DELEGATED_SPACE()': FunctionFragment;
    'LOCKER()': FunctionFragment;
    'MAX_BPS()': FunctionFragment;
    'MAX_FEE()': FunctionFragment;
    'SNAPSHOT()': FunctionFragment;
    '__BaseStrategy_init(address,address,address,address,address)': FunctionFragment;
    'balanceOf()': FunctionFragment;
    'balanceOfPool()': FunctionFragment;
    'balanceOfWant()': FunctionFragment;
    'baseStrategyVersion()': FunctionFragment;
    'controller()': FunctionFragment;
    'deposit()': FunctionFragment;
    'getBoostPayment()': FunctionFragment;
    'getName()': FunctionFragment;
    'getProtectedTokens()': FunctionFragment;
    'governance()': FunctionFragment;
    'guardian()': FunctionFragment;
    'harvest()': FunctionFragment;
    'harvestOnRebalance()': FunctionFragment;
    'initialize(address,address,address,address,address,address[3],uint256[3])': FunctionFragment;
    'isTendable()': FunctionFragment;
    'keeper()': FunctionFragment;
    'lpComponent()': FunctionFragment;
    'manualProcessExpiredLocks()': FunctionFragment;
    'manualRebalance(uint256)': FunctionFragment;
    'manualSendCVXToVault()': FunctionFragment;
    'manualSetDelegate(address)': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'performanceFeeGovernance()': FunctionFragment;
    'performanceFeeStrategist()': FunctionFragment;
    'prepareWithdrawAll()': FunctionFragment;
    'processLocksOnRebalance()': FunctionFragment;
    'processLocksOnReinvest()': FunctionFragment;
    'reinvest()': FunctionFragment;
    'reward()': FunctionFragment;
    'setController(address)': FunctionFragment;
    'setGovernance(address)': FunctionFragment;
    'setGuardian(address)': FunctionFragment;
    'setHarvestOnRebalance(bool)': FunctionFragment;
    'setKeeper(address)': FunctionFragment;
    'setPerformanceFeeGovernance(uint256)': FunctionFragment;
    'setPerformanceFeeStrategist(uint256)': FunctionFragment;
    'setProcessLocksOnRebalance(bool)': FunctionFragment;
    'setProcessLocksOnReinvest(bool)': FunctionFragment;
    'setStrategist(address)': FunctionFragment;
    'setWithdrawalFee(uint256)': FunctionFragment;
    'setWithdrawalMaxDeviationThreshold(uint256)': FunctionFragment;
    'setWithdrawalSafetyCheck(bool)': FunctionFragment;
    'strategist()': FunctionFragment;
    'tend()': FunctionFragment;
    'uniswap()': FunctionFragment;
    'unpause()': FunctionFragment;
    'version()': FunctionFragment;
    'want()': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
    'withdrawAll()': FunctionFragment;
    'withdrawOther(address)': FunctionFragment;
    'withdrawalFee()': FunctionFragment;
    'withdrawalMaxDeviationThreshold()': FunctionFragment;
    'withdrawalSafetyCheck()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'BADGER_TREE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'CVXCRV_VAULT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DELEGATE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DELEGATED_SPACE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'LOCKER', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_BPS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_FEE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'SNAPSHOT', values?: undefined): string;
  encodeFunctionData(functionFragment: '__BaseStrategy_init', values: [string, string, string, string, string]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOfPool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOfWant', values?: undefined): string;
  encodeFunctionData(functionFragment: 'baseStrategyVersion', values?: undefined): string;
  encodeFunctionData(functionFragment: 'controller', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deposit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getBoostPayment', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getName', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getProtectedTokens', values?: undefined): string;
  encodeFunctionData(functionFragment: 'governance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'guardian', values?: undefined): string;
  encodeFunctionData(functionFragment: 'harvest', values?: undefined): string;
  encodeFunctionData(functionFragment: 'harvestOnRebalance', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      string,
      string,
      string,
      string,
      string,
      [string, string, string],
      [BigNumberish, BigNumberish, BigNumberish],
    ],
  ): string;
  encodeFunctionData(functionFragment: 'isTendable', values?: undefined): string;
  encodeFunctionData(functionFragment: 'keeper', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lpComponent', values?: undefined): string;
  encodeFunctionData(functionFragment: 'manualProcessExpiredLocks', values?: undefined): string;
  encodeFunctionData(functionFragment: 'manualRebalance', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'manualSendCVXToVault', values?: undefined): string;
  encodeFunctionData(functionFragment: 'manualSetDelegate', values: [string]): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'performanceFeeGovernance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'performanceFeeStrategist', values?: undefined): string;
  encodeFunctionData(functionFragment: 'prepareWithdrawAll', values?: undefined): string;
  encodeFunctionData(functionFragment: 'processLocksOnRebalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'processLocksOnReinvest', values?: undefined): string;
  encodeFunctionData(functionFragment: 'reinvest', values?: undefined): string;
  encodeFunctionData(functionFragment: 'reward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setController', values: [string]): string;
  encodeFunctionData(functionFragment: 'setGovernance', values: [string]): string;
  encodeFunctionData(functionFragment: 'setGuardian', values: [string]): string;
  encodeFunctionData(functionFragment: 'setHarvestOnRebalance', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'setKeeper', values: [string]): string;
  encodeFunctionData(functionFragment: 'setPerformanceFeeGovernance', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setPerformanceFeeStrategist', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setProcessLocksOnRebalance', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'setProcessLocksOnReinvest', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'setStrategist', values: [string]): string;
  encodeFunctionData(functionFragment: 'setWithdrawalFee', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setWithdrawalMaxDeviationThreshold', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setWithdrawalSafetyCheck', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'strategist', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tend', values?: undefined): string;
  encodeFunctionData(functionFragment: 'uniswap', values?: undefined): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'version', values?: undefined): string;
  encodeFunctionData(functionFragment: 'want', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdrawAll', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawOther', values: [string]): string;
  encodeFunctionData(functionFragment: 'withdrawalFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawalMaxDeviationThreshold', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawalSafetyCheck', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'BADGER_TREE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'CVXCRV_VAULT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DELEGATE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DELEGATED_SPACE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'LOCKER', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_BPS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_FEE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'SNAPSHOT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '__BaseStrategy_init', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOfPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOfWant', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'baseStrategyVersion', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'controller', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBoostPayment', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getName', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getProtectedTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'governance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'guardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvestOnRebalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isTendable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'keeper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lpComponent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'manualProcessExpiredLocks', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'manualRebalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'manualSendCVXToVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'manualSetDelegate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'performanceFeeGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'performanceFeeStrategist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'prepareWithdrawAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'processLocksOnRebalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'processLocksOnReinvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reinvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setHarvestOnRebalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setKeeper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPerformanceFeeGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPerformanceFeeStrategist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setProcessLocksOnRebalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setProcessLocksOnReinvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setStrategist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWithdrawalFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWithdrawalMaxDeviationThreshold', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWithdrawalSafetyCheck', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strategist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tend', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'uniswap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'want', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawOther', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawalFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawalMaxDeviationThreshold', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawalSafetyCheck', data: BytesLike): Result;

  events: {
    'Harvest(uint256,uint256)': EventFragment;
    'Paused(address)': EventFragment;
    'PerformanceFeeGovernance(address,address,uint256,uint256,uint256)': EventFragment;
    'PerformanceFeeStrategist(address,address,uint256,uint256,uint256)': EventFragment;
    'SetController(address)': EventFragment;
    'SetGovernance(address)': EventFragment;
    'SetPerformanceFeeGovernance(uint256)': EventFragment;
    'SetPerformanceFeeStrategist(uint256)': EventFragment;
    'SetStrategist(address)': EventFragment;
    'SetWithdrawalFee(uint256)': EventFragment;
    'Tend(uint256)': EventFragment;
    'TreeDistribution(address,uint256,uint256,uint256)': EventFragment;
    'Unpaused(address)': EventFragment;
    'Withdraw(uint256)': EventFragment;
    'WithdrawAll(uint256)': EventFragment;
    'WithdrawOther(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Harvest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PerformanceFeeGovernance'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PerformanceFeeStrategist'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetController'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetGovernance'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetPerformanceFeeGovernance'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetPerformanceFeeStrategist'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetStrategist'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetWithdrawalFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Tend'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TreeDistribution'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawAll'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawOther'): EventFragment;
}

export class Strategy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StrategyInterface;

  functions: {
    BADGER_TREE(overrides?: CallOverrides): Promise<[string]>;

    CVXCRV_VAULT(overrides?: CallOverrides): Promise<[string]>;

    DELEGATE(overrides?: CallOverrides): Promise<[string]>;

    DELEGATED_SPACE(overrides?: CallOverrides): Promise<[string]>;

    LOCKER(overrides?: CallOverrides): Promise<[string]>;

    MAX_BPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    SNAPSHOT(overrides?: CallOverrides): Promise<[string]>;

    __BaseStrategy_init(
      _governance: string,
      _strategist: string,
      _controller: string,
      _keeper: string,
      _guardian: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    balanceOf(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfPool(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfWant(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseStrategyVersion(overrides?: CallOverrides): Promise<[string]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    deposit(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    getBoostPayment(overrides?: CallOverrides): Promise<[BigNumber]>;

    getName(overrides?: CallOverrides): Promise<[string]>;

    getProtectedTokens(overrides?: CallOverrides): Promise<[string[]]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    guardian(overrides?: CallOverrides): Promise<[string]>;

    harvest(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    harvestOnRebalance(overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      _governance: string,
      _strategist: string,
      _controller: string,
      _keeper: string,
      _guardian: string,
      _wantConfig: [string, string, string],
      _feeConfig: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    isTendable(overrides?: CallOverrides): Promise<[boolean]>;

    keeper(overrides?: CallOverrides): Promise<[string]>;

    lpComponent(overrides?: CallOverrides): Promise<[string]>;

    manualProcessExpiredLocks(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    manualRebalance(
      toLock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    manualSendCVXToVault(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    manualSetDelegate(
      delegate: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    performanceFeeGovernance(overrides?: CallOverrides): Promise<[BigNumber]>;

    performanceFeeStrategist(overrides?: CallOverrides): Promise<[BigNumber]>;

    prepareWithdrawAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    processLocksOnRebalance(overrides?: CallOverrides): Promise<[boolean]>;

    processLocksOnReinvest(overrides?: CallOverrides): Promise<[boolean]>;

    reinvest(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    reward(overrides?: CallOverrides): Promise<[string]>;

    setController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setGuardian(
      _guardian: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setHarvestOnRebalance(
      newHarvestOnRebalance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPerformanceFeeGovernance(
      _performanceFeeGovernance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPerformanceFeeStrategist(
      _performanceFeeStrategist: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setProcessLocksOnRebalance(
      newProcessLocksOnRebalance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setProcessLocksOnReinvest(
      newProcessLocksOnReinvest: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setStrategist(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setWithdrawalFee(
      _withdrawalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setWithdrawalMaxDeviationThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setWithdrawalSafetyCheck(
      newWithdrawalSafetyCheck: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    strategist(overrides?: CallOverrides): Promise<[string]>;

    tend(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    uniswap(overrides?: CallOverrides): Promise<[string]>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;

    want(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    withdrawOther(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawalFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawalMaxDeviationThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawalSafetyCheck(overrides?: CallOverrides): Promise<[boolean]>;
  };

  BADGER_TREE(overrides?: CallOverrides): Promise<string>;

  CVXCRV_VAULT(overrides?: CallOverrides): Promise<string>;

  DELEGATE(overrides?: CallOverrides): Promise<string>;

  DELEGATED_SPACE(overrides?: CallOverrides): Promise<string>;

  LOCKER(overrides?: CallOverrides): Promise<string>;

  MAX_BPS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  SNAPSHOT(overrides?: CallOverrides): Promise<string>;

  __BaseStrategy_init(
    _governance: string,
    _strategist: string,
    _controller: string,
    _keeper: string,
    _guardian: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfPool(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfWant(overrides?: CallOverrides): Promise<BigNumber>;

  baseStrategyVersion(overrides?: CallOverrides): Promise<string>;

  controller(overrides?: CallOverrides): Promise<string>;

  deposit(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  getBoostPayment(overrides?: CallOverrides): Promise<BigNumber>;

  getName(overrides?: CallOverrides): Promise<string>;

  getProtectedTokens(overrides?: CallOverrides): Promise<string[]>;

  governance(overrides?: CallOverrides): Promise<string>;

  guardian(overrides?: CallOverrides): Promise<string>;

  harvest(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  harvestOnRebalance(overrides?: CallOverrides): Promise<boolean>;

  initialize(
    _governance: string,
    _strategist: string,
    _controller: string,
    _keeper: string,
    _guardian: string,
    _wantConfig: [string, string, string],
    _feeConfig: [BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  isTendable(overrides?: CallOverrides): Promise<boolean>;

  keeper(overrides?: CallOverrides): Promise<string>;

  lpComponent(overrides?: CallOverrides): Promise<string>;

  manualProcessExpiredLocks(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  manualRebalance(
    toLock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  manualSendCVXToVault(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  manualSetDelegate(
    delegate: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  performanceFeeGovernance(overrides?: CallOverrides): Promise<BigNumber>;

  performanceFeeStrategist(overrides?: CallOverrides): Promise<BigNumber>;

  prepareWithdrawAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  processLocksOnRebalance(overrides?: CallOverrides): Promise<boolean>;

  processLocksOnReinvest(overrides?: CallOverrides): Promise<boolean>;

  reinvest(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  reward(overrides?: CallOverrides): Promise<string>;

  setController(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setGovernance(
    _governance: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setGuardian(
    _guardian: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setHarvestOnRebalance(
    newHarvestOnRebalance: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setKeeper(_keeper: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setPerformanceFeeGovernance(
    _performanceFeeGovernance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setPerformanceFeeStrategist(
    _performanceFeeStrategist: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setProcessLocksOnRebalance(
    newProcessLocksOnRebalance: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setProcessLocksOnReinvest(
    newProcessLocksOnReinvest: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setStrategist(
    _strategist: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setWithdrawalFee(
    _withdrawalFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setWithdrawalMaxDeviationThreshold(
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setWithdrawalSafetyCheck(
    newWithdrawalSafetyCheck: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  strategist(overrides?: CallOverrides): Promise<string>;

  tend(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  uniswap(overrides?: CallOverrides): Promise<string>;

  unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  want(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  withdrawOther(
    _asset: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawalMaxDeviationThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawalSafetyCheck(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    BADGER_TREE(overrides?: CallOverrides): Promise<string>;

    CVXCRV_VAULT(overrides?: CallOverrides): Promise<string>;

    DELEGATE(overrides?: CallOverrides): Promise<string>;

    DELEGATED_SPACE(overrides?: CallOverrides): Promise<string>;

    LOCKER(overrides?: CallOverrides): Promise<string>;

    MAX_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    SNAPSHOT(overrides?: CallOverrides): Promise<string>;

    __BaseStrategy_init(
      _governance: string,
      _strategist: string,
      _controller: string,
      _keeper: string,
      _guardian: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfPool(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfWant(overrides?: CallOverrides): Promise<BigNumber>;

    baseStrategyVersion(overrides?: CallOverrides): Promise<string>;

    controller(overrides?: CallOverrides): Promise<string>;

    deposit(overrides?: CallOverrides): Promise<void>;

    getBoostPayment(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<string>;

    getProtectedTokens(overrides?: CallOverrides): Promise<string[]>;

    governance(overrides?: CallOverrides): Promise<string>;

    guardian(overrides?: CallOverrides): Promise<string>;

    harvest(overrides?: CallOverrides): Promise<BigNumber>;

    harvestOnRebalance(overrides?: CallOverrides): Promise<boolean>;

    initialize(
      _governance: string,
      _strategist: string,
      _controller: string,
      _keeper: string,
      _guardian: string,
      _wantConfig: [string, string, string],
      _feeConfig: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides,
    ): Promise<void>;

    isTendable(overrides?: CallOverrides): Promise<boolean>;

    keeper(overrides?: CallOverrides): Promise<string>;

    lpComponent(overrides?: CallOverrides): Promise<string>;

    manualProcessExpiredLocks(overrides?: CallOverrides): Promise<void>;

    manualRebalance(toLock: BigNumberish, overrides?: CallOverrides): Promise<void>;

    manualSendCVXToVault(overrides?: CallOverrides): Promise<void>;

    manualSetDelegate(delegate: string, overrides?: CallOverrides): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    performanceFeeGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    performanceFeeStrategist(overrides?: CallOverrides): Promise<BigNumber>;

    prepareWithdrawAll(overrides?: CallOverrides): Promise<void>;

    processLocksOnRebalance(overrides?: CallOverrides): Promise<boolean>;

    processLocksOnReinvest(overrides?: CallOverrides): Promise<boolean>;

    reinvest(overrides?: CallOverrides): Promise<BigNumber>;

    reward(overrides?: CallOverrides): Promise<string>;

    setController(_controller: string, overrides?: CallOverrides): Promise<void>;

    setGovernance(_governance: string, overrides?: CallOverrides): Promise<void>;

    setGuardian(_guardian: string, overrides?: CallOverrides): Promise<void>;

    setHarvestOnRebalance(newHarvestOnRebalance: boolean, overrides?: CallOverrides): Promise<void>;

    setKeeper(_keeper: string, overrides?: CallOverrides): Promise<void>;

    setPerformanceFeeGovernance(_performanceFeeGovernance: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setPerformanceFeeStrategist(_performanceFeeStrategist: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setProcessLocksOnRebalance(newProcessLocksOnRebalance: boolean, overrides?: CallOverrides): Promise<void>;

    setProcessLocksOnReinvest(newProcessLocksOnReinvest: boolean, overrides?: CallOverrides): Promise<void>;

    setStrategist(_strategist: string, overrides?: CallOverrides): Promise<void>;

    setWithdrawalFee(_withdrawalFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setWithdrawalMaxDeviationThreshold(_threshold: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setWithdrawalSafetyCheck(newWithdrawalSafetyCheck: boolean, overrides?: CallOverrides): Promise<void>;

    strategist(overrides?: CallOverrides): Promise<string>;

    tend(overrides?: CallOverrides): Promise<void>;

    uniswap(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;

    want(overrides?: CallOverrides): Promise<string>;

    withdraw(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawOther(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalMaxDeviationThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalSafetyCheck(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    Harvest(
      harvested?: null,
      blockNumber?: BigNumberish | null,
    ): TypedEventFilter<[BigNumber, BigNumber], { harvested: BigNumber; blockNumber: BigNumber }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    PerformanceFeeGovernance(
      destination?: string | null,
      token?: string | null,
      amount?: null,
      blockNumber?: BigNumberish | null,
      timestamp?: null,
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        destination: string;
        token: string;
        amount: BigNumber;
        blockNumber: BigNumber;
        timestamp: BigNumber;
      }
    >;

    PerformanceFeeStrategist(
      destination?: string | null,
      token?: string | null,
      amount?: null,
      blockNumber?: BigNumberish | null,
      timestamp?: null,
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        destination: string;
        token: string;
        amount: BigNumber;
        blockNumber: BigNumber;
        timestamp: BigNumber;
      }
    >;

    SetController(controller?: null): TypedEventFilter<[string], { controller: string }>;

    SetGovernance(governance?: null): TypedEventFilter<[string], { governance: string }>;

    SetPerformanceFeeGovernance(
      performanceFeeGovernance?: null,
    ): TypedEventFilter<[BigNumber], { performanceFeeGovernance: BigNumber }>;

    SetPerformanceFeeStrategist(
      performanceFeeStrategist?: null,
    ): TypedEventFilter<[BigNumber], { performanceFeeStrategist: BigNumber }>;

    SetStrategist(strategist?: null): TypedEventFilter<[string], { strategist: string }>;

    SetWithdrawalFee(withdrawalFee?: null): TypedEventFilter<[BigNumber], { withdrawalFee: BigNumber }>;

    Tend(tended?: null): TypedEventFilter<[BigNumber], { tended: BigNumber }>;

    TreeDistribution(
      token?: string | null,
      amount?: null,
      blockNumber?: BigNumberish | null,
      timestamp?: null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        token: string;
        amount: BigNumber;
        blockNumber: BigNumber;
        timestamp: BigNumber;
      }
    >;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    Withdraw(amount?: null): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    WithdrawAll(balance?: null): TypedEventFilter<[BigNumber], { balance: BigNumber }>;

    WithdrawOther(
      token?: null,
      amount?: null,
    ): TypedEventFilter<[string, BigNumber], { token: string; amount: BigNumber }>;
  };

  estimateGas: {
    BADGER_TREE(overrides?: CallOverrides): Promise<BigNumber>;

    CVXCRV_VAULT(overrides?: CallOverrides): Promise<BigNumber>;

    DELEGATE(overrides?: CallOverrides): Promise<BigNumber>;

    DELEGATED_SPACE(overrides?: CallOverrides): Promise<BigNumber>;

    LOCKER(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    SNAPSHOT(overrides?: CallOverrides): Promise<BigNumber>;

    __BaseStrategy_init(
      _governance: string,
      _strategist: string,
      _controller: string,
      _keeper: string,
      _guardian: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfPool(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfWant(overrides?: CallOverrides): Promise<BigNumber>;

    baseStrategyVersion(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    getBoostPayment(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    getProtectedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    guardian(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    harvestOnRebalance(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _governance: string,
      _strategist: string,
      _controller: string,
      _keeper: string,
      _guardian: string,
      _wantConfig: [string, string, string],
      _feeConfig: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    isTendable(overrides?: CallOverrides): Promise<BigNumber>;

    keeper(overrides?: CallOverrides): Promise<BigNumber>;

    lpComponent(overrides?: CallOverrides): Promise<BigNumber>;

    manualProcessExpiredLocks(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    manualRebalance(
      toLock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    manualSendCVXToVault(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    manualSetDelegate(
      delegate: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    performanceFeeGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    performanceFeeStrategist(overrides?: CallOverrides): Promise<BigNumber>;

    prepareWithdrawAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    processLocksOnRebalance(overrides?: CallOverrides): Promise<BigNumber>;

    processLocksOnReinvest(overrides?: CallOverrides): Promise<BigNumber>;

    reinvest(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    reward(overrides?: CallOverrides): Promise<BigNumber>;

    setController(_controller: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setGovernance(_governance: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setGuardian(_guardian: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setHarvestOnRebalance(
      newHarvestOnRebalance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setKeeper(_keeper: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setPerformanceFeeGovernance(
      _performanceFeeGovernance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setPerformanceFeeStrategist(
      _performanceFeeStrategist: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setProcessLocksOnRebalance(
      newProcessLocksOnRebalance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setProcessLocksOnReinvest(
      newProcessLocksOnReinvest: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setStrategist(_strategist: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setWithdrawalFee(
      _withdrawalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setWithdrawalMaxDeviationThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setWithdrawalSafetyCheck(
      newWithdrawalSafetyCheck: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    strategist(overrides?: CallOverrides): Promise<BigNumber>;

    tend(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    uniswap(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    want(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(_amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    withdrawAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    withdrawOther(_asset: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    withdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalMaxDeviationThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalSafetyCheck(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BADGER_TREE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CVXCRV_VAULT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DELEGATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DELEGATED_SPACE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LOCKER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_BPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SNAPSHOT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __BaseStrategy_init(
      _governance: string,
      _strategist: string,
      _controller: string,
      _keeper: string,
      _guardian: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfWant(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseStrategyVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    getBoostPayment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProtectedTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    guardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvest(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    harvestOnRebalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _governance: string,
      _strategist: string,
      _controller: string,
      _keeper: string,
      _guardian: string,
      _wantConfig: [string, string, string],
      _feeConfig: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    isTendable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpComponent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manualProcessExpiredLocks(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    manualRebalance(
      toLock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    manualSendCVXToVault(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    manualSetDelegate(
      delegate: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performanceFeeGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performanceFeeStrategist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prepareWithdrawAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    processLocksOnRebalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processLocksOnReinvest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reinvest(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    reward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setGuardian(
      _guardian: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setHarvestOnRebalance(
      newHarvestOnRebalance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPerformanceFeeGovernance(
      _performanceFeeGovernance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPerformanceFeeStrategist(
      _performanceFeeStrategist: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setProcessLocksOnRebalance(
      newProcessLocksOnRebalance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setProcessLocksOnReinvest(
      newProcessLocksOnReinvest: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setStrategist(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setWithdrawalFee(
      _withdrawalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setWithdrawalMaxDeviationThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setWithdrawalSafetyCheck(
      newWithdrawalSafetyCheck: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    strategist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tend(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    uniswap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    want(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    withdrawOther(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawalFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawalMaxDeviationThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawalSafetyCheck(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
