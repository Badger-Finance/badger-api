/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
<<<<<<< HEAD
import {
=======
import type {
>>>>>>> c15f0091 (chore: update update)
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
<<<<<<< HEAD
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export type AmpDataStruct = {
  initialA: BigNumberish;
  targetA: BigNumberish;
  rampStartTime: BigNumberish;
  rampEndTime: BigNumberish;
};

export type AmpDataStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber] & {
=======
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type AmpDataStruct = {
  initialA: PromiseOrValue<BigNumberish>;
  targetA: PromiseOrValue<BigNumberish>;
  rampStartTime: PromiseOrValue<BigNumberish>;
  rampEndTime: PromiseOrValue<BigNumberish>;
};

export type AmpDataStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
>>>>>>> c15f0091 (chore: update update)
  initialA: BigNumber;
  targetA: BigNumber;
  rampStartTime: BigNumber;
  rampEndTime: BigNumber;
};

<<<<<<< HEAD
export type WeightLimitsStruct = { min: BigNumberish; max: BigNumberish };
=======
export type WeightLimitsStruct = {
  min: PromiseOrValue<BigNumberish>;
  max: PromiseOrValue<BigNumberish>;
};
>>>>>>> c15f0091 (chore: update update)

export type WeightLimitsStructOutput = [BigNumber, BigNumber] & {
  min: BigNumber;
  max: BigNumber;
};

export type BassetPersonalStruct = {
<<<<<<< HEAD
  addr: string;
  integrator: string;
  hasTxFee: boolean;
  status: BigNumberish;
=======
  addr: PromiseOrValue<string>;
  integrator: PromiseOrValue<string>;
  hasTxFee: PromiseOrValue<boolean>;
  status: PromiseOrValue<BigNumberish>;
>>>>>>> c15f0091 (chore: update update)
};

export type BassetPersonalStructOutput = [string, string, boolean, number] & {
  addr: string;
  integrator: string;
  hasTxFee: boolean;
  status: number;
};

export type BassetDataStruct = {
<<<<<<< HEAD
  ratio: BigNumberish;
  vaultBalance: BigNumberish;
=======
  ratio: PromiseOrValue<BigNumberish>;
  vaultBalance: PromiseOrValue<BigNumberish>;
>>>>>>> c15f0091 (chore: update update)
};

export type BassetDataStructOutput = [BigNumber, BigNumber] & {
  ratio: BigNumber;
  vaultBalance: BigNumber;
};

export type FeederConfigStruct = {
<<<<<<< HEAD
  supply: BigNumberish;
  a: BigNumberish;
  limits: WeightLimitsStruct;
};

export type FeederConfigStructOutput = [BigNumber, BigNumber, WeightLimitsStructOutput] & {
  supply: BigNumber;
  a: BigNumber;
  limits: WeightLimitsStructOutput;
};

export type InvariantConfigStruct = {
  a: BigNumberish;
  limits: WeightLimitsStruct;
};

export type InvariantConfigStructOutput = [BigNumber, WeightLimitsStructOutput] & {
  a: BigNumber;
  limits: WeightLimitsStructOutput;
};

export interface MhbtcInterface extends utils.Interface {
  contractName: 'Mhbtc';
  functions: {
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'collectPendingFees()': FunctionFragment;
    'collectPlatformInterest()': FunctionFragment;
    'data()': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'getBasset(address)': FunctionFragment;
    'getBassets()': FunctionFragment;
    'getConfig()': FunctionFragment;
    'getMintMultiOutput(address[],uint256[])': FunctionFragment;
    'getMintOutput(address,uint256)': FunctionFragment;
    'getPrice()': FunctionFragment;
    'getRedeemExactBassetsOutput(address[],uint256[])': FunctionFragment;
    'getRedeemOutput(address,uint256)': FunctionFragment;
    'getSwapOutput(address,address,uint256)': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'initialize(string,string,(address,address,bool,uint8),(address,address,bool,uint8),address[],(uint256,(uint128,uint128)))': FunctionFragment;
    'mAsset()': FunctionFragment;
    'migrateBassets(address[],address)': FunctionFragment;
    'mint(address,uint256,uint256,address)': FunctionFragment;
    'mintMulti(address[],uint256[],uint256,address)': FunctionFragment;
    'name()': FunctionFragment;
    'nexus()': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'redeem(address,uint256,uint256,address)': FunctionFragment;
    'redeemExactBassets(address[],uint256[],uint256,address)': FunctionFragment;
    'redeemProportionately(uint256,uint256[],address)': FunctionFragment;
    'setCacheSize(uint256)': FunctionFragment;
    'setFees(uint256,uint256,uint256)': FunctionFragment;
    'setWeightLimits(uint128,uint128)': FunctionFragment;
    'startRampA(uint256,uint256)': FunctionFragment;
    'stopRampA()': FunctionFragment;
    'swap(address,address,uint256,uint256,address)': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'unpause()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'collectPendingFees', values?: undefined): string;
  encodeFunctionData(functionFragment: 'collectPlatformInterest', values?: undefined): string;
  encodeFunctionData(functionFragment: 'data', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decreaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getBasset', values: [string]): string;
  encodeFunctionData(functionFragment: 'getBassets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getConfig', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getMintMultiOutput', values: [string[], BigNumberish[]]): string;
  encodeFunctionData(functionFragment: 'getMintOutput', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getPrice', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRedeemExactBassetsOutput', values: [string[], BigNumberish[]]): string;
  encodeFunctionData(functionFragment: 'getRedeemOutput', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getSwapOutput', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'increaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string, BassetPersonalStruct, BassetPersonalStruct, string[], InvariantConfigStruct],
  ): string;
  encodeFunctionData(functionFragment: 'mAsset', values?: undefined): string;
  encodeFunctionData(functionFragment: 'migrateBassets', values: [string[], string]): string;
  encodeFunctionData(functionFragment: 'mint', values: [string, BigNumberish, BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'mintMulti', values: [string[], BigNumberish[], BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nexus', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'redeem', values: [string, BigNumberish, BigNumberish, string]): string;
  encodeFunctionData(
    functionFragment: 'redeemExactBassets',
    values: [string[], BigNumberish[], BigNumberish, string],
  ): string;
  encodeFunctionData(functionFragment: 'redeemProportionately', values: [BigNumberish, BigNumberish[], string]): string;
  encodeFunctionData(functionFragment: 'setCacheSize', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setFees', values: [BigNumberish, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setWeightLimits', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'startRampA', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'stopRampA', values?: undefined): string;
  encodeFunctionData(functionFragment: 'swap', values: [string, string, BigNumberish, BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collectPendingFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collectPlatformInterest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'data', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBasset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBassets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getConfig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMintMultiOutput', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMintOutput', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRedeemExactBassetsOutput', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRedeemOutput', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSwapOutput', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'migrateBassets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintMulti', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nexus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemExactBassets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemProportionately', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCacheSize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWeightLimits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'startRampA', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stopRampA', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'BassetsMigrated(address[],address)': EventFragment;
    'CacheSizeChanged(uint256)': EventFragment;
    'FeesChanged(uint256,uint256,uint256)': EventFragment;
    'Minted(address,address,uint256,address,uint256)': EventFragment;
    'MintedMulti(address,address,uint256,address[],uint256[])': EventFragment;
    'Paused(address)': EventFragment;
    'Redeemed(address,address,uint256,address,uint256,uint256)': EventFragment;
    'RedeemedMulti(address,address,uint256,address[],uint256[],uint256)': EventFragment;
    'StartRampA(uint256,uint256,uint256,uint256)': EventFragment;
    'StopRampA(uint256,uint256)': EventFragment;
    'Swapped(address,address,address,uint256,uint256,address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Unpaused(address)': EventFragment;
    'WeightLimitsChanged(uint128,uint128)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BassetsMigrated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CacheSizeChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeesChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Minted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MintedMulti'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Redeemed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RedeemedMulti'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StartRampA'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StopRampA'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Swapped'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WeightLimitsChanged'): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
=======
  supply: PromiseOrValue<BigNumberish>;
  a: PromiseOrValue<BigNumberish>;
  limits: WeightLimitsStruct;
};

export type FeederConfigStructOutput = [
  BigNumber,
  BigNumber,
  WeightLimitsStructOutput
] & { supply: BigNumber; a: BigNumber; limits: WeightLimitsStructOutput };

export type InvariantConfigStruct = {
  a: PromiseOrValue<BigNumberish>;
  limits: WeightLimitsStruct;
};

export type InvariantConfigStructOutput = [
  BigNumber,
  WeightLimitsStructOutput
] & { a: BigNumber; limits: WeightLimitsStructOutput };

export interface MhbtcInterface extends utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "collectPendingFees()": FunctionFragment;
    "collectPlatformInterest()": FunctionFragment;
    "data()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "getBasset(address)": FunctionFragment;
    "getBassets()": FunctionFragment;
    "getConfig()": FunctionFragment;
    "getMintMultiOutput(address[],uint256[])": FunctionFragment;
    "getMintOutput(address,uint256)": FunctionFragment;
    "getPrice()": FunctionFragment;
    "getRedeemExactBassetsOutput(address[],uint256[])": FunctionFragment;
    "getRedeemOutput(address,uint256)": FunctionFragment;
    "getSwapOutput(address,address,uint256)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(string,string,(address,address,bool,uint8),(address,address,bool,uint8),address[],(uint256,(uint128,uint128)))": FunctionFragment;
    "mAsset()": FunctionFragment;
    "migrateBassets(address[],address)": FunctionFragment;
    "mint(address,uint256,uint256,address)": FunctionFragment;
    "mintMulti(address[],uint256[],uint256,address)": FunctionFragment;
    "name()": FunctionFragment;
    "nexus()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "redeem(address,uint256,uint256,address)": FunctionFragment;
    "redeemExactBassets(address[],uint256[],uint256,address)": FunctionFragment;
    "redeemProportionately(uint256,uint256[],address)": FunctionFragment;
    "setCacheSize(uint256)": FunctionFragment;
    "setFees(uint256,uint256,uint256)": FunctionFragment;
    "setWeightLimits(uint128,uint128)": FunctionFragment;
    "startRampA(uint256,uint256)": FunctionFragment;
    "stopRampA()": FunctionFragment;
    "swap(address,address,uint256,uint256,address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allowance"
      | "approve"
      | "balanceOf"
      | "collectPendingFees"
      | "collectPlatformInterest"
      | "data"
      | "decimals"
      | "decreaseAllowance"
      | "getBasset"
      | "getBassets"
      | "getConfig"
      | "getMintMultiOutput"
      | "getMintOutput"
      | "getPrice"
      | "getRedeemExactBassetsOutput"
      | "getRedeemOutput"
      | "getSwapOutput"
      | "increaseAllowance"
      | "initialize"
      | "mAsset"
      | "migrateBassets"
      | "mint"
      | "mintMulti"
      | "name"
      | "nexus"
      | "pause"
      | "paused"
      | "redeem"
      | "redeemExactBassets"
      | "redeemProportionately"
      | "setCacheSize"
      | "setFees"
      | "setWeightLimits"
      | "startRampA"
      | "stopRampA"
      | "swap"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectPendingFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectPlatformInterest",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "data", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBasset",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBassets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMintMultiOutput",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getMintOutput",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRedeemExactBassetsOutput",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedeemOutput",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapOutput",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      BassetPersonalStruct,
      BassetPersonalStruct,
      PromiseOrValue<string>[],
      InvariantConfigStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "mAsset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "migrateBassets",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintMulti",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nexus", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemExactBassets",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemProportionately",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setCacheSize",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFees",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setWeightLimits",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "startRampA",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "stopRampA", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectPendingFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectPlatformInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "data", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBasset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBassets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMintMultiOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRedeemExactBassetsOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedeemOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrateBassets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintMulti", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nexus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemExactBassets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemProportionately",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCacheSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWeightLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startRampA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stopRampA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "BassetsMigrated(address[],address)": EventFragment;
    "CacheSizeChanged(uint256)": EventFragment;
    "FeesChanged(uint256,uint256,uint256)": EventFragment;
    "Minted(address,address,uint256,address,uint256)": EventFragment;
    "MintedMulti(address,address,uint256,address[],uint256[])": EventFragment;
    "Paused(address)": EventFragment;
    "Redeemed(address,address,uint256,address,uint256,uint256)": EventFragment;
    "RedeemedMulti(address,address,uint256,address[],uint256[],uint256)": EventFragment;
    "StartRampA(uint256,uint256,uint256,uint256)": EventFragment;
    "StopRampA(uint256,uint256)": EventFragment;
    "Swapped(address,address,address,uint256,uint256,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "WeightLimitsChanged(uint128,uint128)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BassetsMigrated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CacheSizeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Minted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintedMulti"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemedMulti"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartRampA"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StopRampA"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swapped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WeightLimitsChanged"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>>>>>>> c15f0091 (chore: update update)
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

<<<<<<< HEAD
export type BassetsMigratedEvent = TypedEvent<[string[], string], { bAssets: string[]; newIntegrator: string }>;

export type BassetsMigratedEventFilter = TypedEventFilter<BassetsMigratedEvent>;

export type CacheSizeChangedEvent = TypedEvent<[BigNumber], { cacheSize: BigNumber }>;

export type CacheSizeChangedEventFilter = TypedEventFilter<CacheSizeChangedEvent>;

export type FeesChangedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { swapFee: BigNumber; redemptionFee: BigNumber; govFee: BigNumber }
=======
export interface BassetsMigratedEventObject {
  bAssets: string[];
  newIntegrator: string;
}
export type BassetsMigratedEvent = TypedEvent<
  [string[], string],
  BassetsMigratedEventObject
>;

export type BassetsMigratedEventFilter = TypedEventFilter<BassetsMigratedEvent>;

export interface CacheSizeChangedEventObject {
  cacheSize: BigNumber;
}
export type CacheSizeChangedEvent = TypedEvent<
  [BigNumber],
  CacheSizeChangedEventObject
>;

export type CacheSizeChangedEventFilter =
  TypedEventFilter<CacheSizeChangedEvent>;

export interface FeesChangedEventObject {
  swapFee: BigNumber;
  redemptionFee: BigNumber;
  govFee: BigNumber;
}
export type FeesChangedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  FeesChangedEventObject
>>>>>>> c15f0091 (chore: update update)
>;

export type FeesChangedEventFilter = TypedEventFilter<FeesChangedEvent>;

<<<<<<< HEAD
export type MintedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  {
    minter: string;
    recipient: string;
    output: BigNumber;
    input: string;
    inputQuantity: BigNumber;
  }
=======
export interface MintedEventObject {
  minter: string;
  recipient: string;
  output: BigNumber;
  input: string;
  inputQuantity: BigNumber;
}
export type MintedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  MintedEventObject
>>>>>>> c15f0091 (chore: update update)
>;

export type MintedEventFilter = TypedEventFilter<MintedEvent>;

<<<<<<< HEAD
export type MintedMultiEvent = TypedEvent<
  [string, string, BigNumber, string[], BigNumber[]],
  {
    minter: string;
    recipient: string;
    output: BigNumber;
    inputs: string[];
    inputQuantities: BigNumber[];
  }
=======
export interface MintedMultiEventObject {
  minter: string;
  recipient: string;
  output: BigNumber;
  inputs: string[];
  inputQuantities: BigNumber[];
}
export type MintedMultiEvent = TypedEvent<
  [string, string, BigNumber, string[], BigNumber[]],
  MintedMultiEventObject
>>>>>>> c15f0091 (chore: update update)
>;

export type MintedMultiEventFilter = TypedEventFilter<MintedMultiEvent>;

<<<<<<< HEAD
export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type RedeemedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber, BigNumber],
  {
    redeemer: string;
    recipient: string;
    mAssetQuantity: BigNumber;
    output: string;
    outputQuantity: BigNumber;
    scaledFee: BigNumber;
  }
=======
export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RedeemedEventObject {
  redeemer: string;
  recipient: string;
  mAssetQuantity: BigNumber;
  output: string;
  outputQuantity: BigNumber;
  scaledFee: BigNumber;
}
export type RedeemedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber, BigNumber],
  RedeemedEventObject
>>>>>>> c15f0091 (chore: update update)
>;

export type RedeemedEventFilter = TypedEventFilter<RedeemedEvent>;

<<<<<<< HEAD
export type RedeemedMultiEvent = TypedEvent<
  [string, string, BigNumber, string[], BigNumber[], BigNumber],
  {
    redeemer: string;
    recipient: string;
    mAssetQuantity: BigNumber;
    outputs: string[];
    outputQuantity: BigNumber[];
    scaledFee: BigNumber;
  }
=======
export interface RedeemedMultiEventObject {
  redeemer: string;
  recipient: string;
  mAssetQuantity: BigNumber;
  outputs: string[];
  outputQuantity: BigNumber[];
  scaledFee: BigNumber;
}
export type RedeemedMultiEvent = TypedEvent<
  [string, string, BigNumber, string[], BigNumber[], BigNumber],
  RedeemedMultiEventObject
>>>>>>> c15f0091 (chore: update update)
>;

export type RedeemedMultiEventFilter = TypedEventFilter<RedeemedMultiEvent>;

<<<<<<< HEAD
export type StartRampAEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  {
    currentA: BigNumber;
    targetA: BigNumber;
    startTime: BigNumber;
    rampEndTime: BigNumber;
  }
=======
export interface StartRampAEventObject {
  currentA: BigNumber;
  targetA: BigNumber;
  startTime: BigNumber;
  rampEndTime: BigNumber;
}
export type StartRampAEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  StartRampAEventObject
>>>>>>> c15f0091 (chore: update update)
>;

export type StartRampAEventFilter = TypedEventFilter<StartRampAEvent>;

<<<<<<< HEAD
export type StopRampAEvent = TypedEvent<[BigNumber, BigNumber], { currentA: BigNumber; time: BigNumber }>;

export type StopRampAEventFilter = TypedEventFilter<StopRampAEvent>;

export type SwappedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, string],
  {
    swapper: string;
    input: string;
    output: string;
    outputAmount: BigNumber;
    fee: BigNumber;
    recipient: string;
  }
=======
export interface StopRampAEventObject {
  currentA: BigNumber;
  time: BigNumber;
}
export type StopRampAEvent = TypedEvent<
  [BigNumber, BigNumber],
  StopRampAEventObject
>;

export type StopRampAEventFilter = TypedEventFilter<StopRampAEvent>;

export interface SwappedEventObject {
  swapper: string;
  input: string;
  output: string;
  outputAmount: BigNumber;
  fee: BigNumber;
  recipient: string;
}
export type SwappedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, string],
  SwappedEventObject
>>>>>>> c15f0091 (chore: update update)
>;

export type SwappedEventFilter = TypedEventFilter<SwappedEvent>;

<<<<<<< HEAD
export type TransferEvent = TypedEvent<[string, string, BigNumber], { from: string; to: string; value: BigNumber }>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type WeightLimitsChangedEvent = TypedEvent<[BigNumber, BigNumber], { min: BigNumber; max: BigNumber }>;

export type WeightLimitsChangedEventFilter = TypedEventFilter<WeightLimitsChangedEvent>;

export interface Mhbtc extends BaseContract {
  contractName: 'Mhbtc';
=======
export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WeightLimitsChangedEventObject {
  min: BigNumber;
  max: BigNumber;
}
export type WeightLimitsChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  WeightLimitsChangedEventObject
>;

export type WeightLimitsChangedEventFilter =
  TypedEventFilter<WeightLimitsChangedEvent>;

export interface Mhbtc extends BaseContract {
>>>>>>> c15f0091 (chore: update update)
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MhbtcInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
<<<<<<< HEAD
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
=======
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
>>>>>>> c15f0091 (chore: update update)
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
<<<<<<< HEAD
    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    collectPendingFees(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    collectPlatformInterest(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    data(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, AmpDataStructOutput, WeightLimitsStructOutput] & {
=======
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collectPendingFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectPlatformInterest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    data(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        AmpDataStructOutput,
        WeightLimitsStructOutput
      ] & {
>>>>>>> c15f0091 (chore: update update)
        swapFee: BigNumber;
        redemptionFee: BigNumber;
        govFee: BigNumber;
        pendingFees: BigNumber;
        cacheSize: BigNumber;
        ampData: AmpDataStructOutput;
        weightLimits: WeightLimitsStructOutput;
      }
    >;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
<<<<<<< HEAD
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getBasset(
      _bAsset: string,
      overrides?: CallOverrides,
=======
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBasset(
      _bAsset: PromiseOrValue<string>,
      overrides?: CallOverrides
>>>>>>> c15f0091 (chore: update update)
    ): Promise<
      [BassetPersonalStructOutput, BassetDataStructOutput] & {
        personal: BassetPersonalStructOutput;
        vaultData: BassetDataStructOutput;
      }
    >;

<<<<<<< HEAD
    getBassets(overrides?: CallOverrides): Promise<
=======
    getBassets(
      overrides?: CallOverrides
    ): Promise<
>>>>>>> c15f0091 (chore: update update)
      [BassetPersonalStructOutput[], BassetDataStructOutput[]] & {
        vaultData: BassetDataStructOutput[];
      }
    >;

<<<<<<< HEAD
    getConfig(overrides?: CallOverrides): Promise<[FeederConfigStructOutput] & { config: FeederConfigStructOutput }>;

    getMintMultiOutput(
      _inputs: string[],
      _inputQuantities: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { mintOutput: BigNumber }>;

    getMintOutput(
      _input: string,
      _inputQuantity: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { mintOutput: BigNumber }>;

    getPrice(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { price: BigNumber; k: BigNumber }>;

    getRedeemExactBassetsOutput(
      _outputs: string[],
      _outputQuantities: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { fpTokenQuantity: BigNumber }>;

    getRedeemOutput(
      _output: string,
      _fpTokenQuantity: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { bAssetOutput: BigNumber }>;

    getSwapOutput(
      _input: string,
      _output: string,
      _inputQuantity: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { swapOutput: BigNumber }>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    initialize(
      _nameArg: string,
      _symbolArg: string,
      _mAsset: BassetPersonalStruct,
      _fAsset: BassetPersonalStruct,
      _mpAssets: string[],
      _config: InvariantConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
=======
    getConfig(
      overrides?: CallOverrides
    ): Promise<
      [FeederConfigStructOutput] & { config: FeederConfigStructOutput }
    >;

    getMintMultiOutput(
      _inputs: PromiseOrValue<string>[],
      _inputQuantities: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { mintOutput: BigNumber }>;

    getMintOutput(
      _input: PromiseOrValue<string>,
      _inputQuantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { mintOutput: BigNumber }>;

    getPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { price: BigNumber; k: BigNumber }>;

    getRedeemExactBassetsOutput(
      _outputs: PromiseOrValue<string>[],
      _outputQuantities: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fpTokenQuantity: BigNumber }>;

    getRedeemOutput(
      _output: PromiseOrValue<string>,
      _fpTokenQuantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bAssetOutput: BigNumber }>;

    getSwapOutput(
      _input: PromiseOrValue<string>,
      _output: PromiseOrValue<string>,
      _inputQuantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { swapOutput: BigNumber }>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _nameArg: PromiseOrValue<string>,
      _symbolArg: PromiseOrValue<string>,
      _mAsset: BassetPersonalStruct,
      _fAsset: BassetPersonalStruct,
      _mpAssets: PromiseOrValue<string>[],
      _config: InvariantConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
    ): Promise<ContractTransaction>;

    mAsset(overrides?: CallOverrides): Promise<[string]>;

    migrateBassets(
<<<<<<< HEAD
      _bAssets: string[],
      _newIntegration: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    mint(
      _input: string,
      _inputQuantity: BigNumberish,
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    mintMulti(
      _inputs: string[],
      _inputQuantities: BigNumberish[],
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      _bAssets: PromiseOrValue<string>[],
      _newIntegration: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mint(
      _input: PromiseOrValue<string>,
      _inputQuantity: PromiseOrValue<BigNumberish>,
      _minOutputQuantity: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintMulti(
      _inputs: PromiseOrValue<string>[],
      _inputQuantities: PromiseOrValue<BigNumberish>[],
      _minOutputQuantity: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nexus(overrides?: CallOverrides): Promise<[string]>;

<<<<<<< HEAD
    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;
=======
    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
>>>>>>> c15f0091 (chore: update update)

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    redeem(
<<<<<<< HEAD
      _output: string,
      _fpTokenQuantity: BigNumberish,
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    redeemExactBassets(
      _outputs: string[],
      _outputQuantities: BigNumberish[],
      _maxInputQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    redeemProportionately(
      _inputQuantity: BigNumberish,
      _minOutputQuantities: BigNumberish[],
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setCacheSize(
      _cacheSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setFees(
      _swapFee: BigNumberish,
      _redemptionFee: BigNumberish,
      _govFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setWeightLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    startRampA(
      _targetA: BigNumberish,
      _rampEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    stopRampA(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    swap(
      _input: string,
      _output: string,
      _inputQuantity: BigNumberish,
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      _output: PromiseOrValue<string>,
      _fpTokenQuantity: PromiseOrValue<BigNumberish>,
      _minOutputQuantity: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemExactBassets(
      _outputs: PromiseOrValue<string>[],
      _outputQuantities: PromiseOrValue<BigNumberish>[],
      _maxInputQuantity: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemProportionately(
      _inputQuantity: PromiseOrValue<BigNumberish>,
      _minOutputQuantities: PromiseOrValue<BigNumberish>[],
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCacheSize(
      _cacheSize: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFees(
      _swapFee: PromiseOrValue<BigNumberish>,
      _redemptionFee: PromiseOrValue<BigNumberish>,
      _govFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWeightLimits(
      _min: PromiseOrValue<BigNumberish>,
      _max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startRampA(
      _targetA: PromiseOrValue<BigNumberish>,
      _rampEndTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stopRampA(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swap(
      _input: PromiseOrValue<string>,
      _output: PromiseOrValue<string>,
      _inputQuantity: PromiseOrValue<BigNumberish>,
      _minOutputQuantity: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
<<<<<<< HEAD
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;
  };

  allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  collectPendingFees(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  collectPlatformInterest(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  data(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, AmpDataStructOutput, WeightLimitsStructOutput] & {
=======
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collectPendingFees(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectPlatformInterest(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  data(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      AmpDataStructOutput,
      WeightLimitsStructOutput
    ] & {
>>>>>>> c15f0091 (chore: update update)
      swapFee: BigNumber;
      redemptionFee: BigNumber;
      govFee: BigNumber;
      pendingFees: BigNumber;
      cacheSize: BigNumber;
      ampData: AmpDataStructOutput;
      weightLimits: WeightLimitsStructOutput;
    }
  >;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
<<<<<<< HEAD
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getBasset(
    _bAsset: string,
    overrides?: CallOverrides,
=======
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBasset(
    _bAsset: PromiseOrValue<string>,
    overrides?: CallOverrides
>>>>>>> c15f0091 (chore: update update)
  ): Promise<
    [BassetPersonalStructOutput, BassetDataStructOutput] & {
      personal: BassetPersonalStructOutput;
      vaultData: BassetDataStructOutput;
    }
  >;

<<<<<<< HEAD
  getBassets(overrides?: CallOverrides): Promise<
=======
  getBassets(
    overrides?: CallOverrides
  ): Promise<
>>>>>>> c15f0091 (chore: update update)
    [BassetPersonalStructOutput[], BassetDataStructOutput[]] & {
      vaultData: BassetDataStructOutput[];
    }
  >;

  getConfig(overrides?: CallOverrides): Promise<FeederConfigStructOutput>;

  getMintMultiOutput(
<<<<<<< HEAD
    _inputs: string[],
    _inputQuantities: BigNumberish[],
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getMintOutput(_input: string, _inputQuantity: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getPrice(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { price: BigNumber; k: BigNumber }>;

  getRedeemExactBassetsOutput(
    _outputs: string[],
    _outputQuantities: BigNumberish[],
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getRedeemOutput(_output: string, _fpTokenQuantity: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getSwapOutput(
    _input: string,
    _output: string,
    _inputQuantity: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  initialize(
    _nameArg: string,
    _symbolArg: string,
    _mAsset: BassetPersonalStruct,
    _fAsset: BassetPersonalStruct,
    _mpAssets: string[],
    _config: InvariantConfigStruct,
    overrides?: Overrides & { from?: string | Promise<string> },
=======
    _inputs: PromiseOrValue<string>[],
    _inputQuantities: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMintOutput(
    _input: PromiseOrValue<string>,
    _inputQuantity: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPrice(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { price: BigNumber; k: BigNumber }>;

  getRedeemExactBassetsOutput(
    _outputs: PromiseOrValue<string>[],
    _outputQuantities: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRedeemOutput(
    _output: PromiseOrValue<string>,
    _fpTokenQuantity: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSwapOutput(
    _input: PromiseOrValue<string>,
    _output: PromiseOrValue<string>,
    _inputQuantity: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _nameArg: PromiseOrValue<string>,
    _symbolArg: PromiseOrValue<string>,
    _mAsset: BassetPersonalStruct,
    _fAsset: BassetPersonalStruct,
    _mpAssets: PromiseOrValue<string>[],
    _config: InvariantConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
  ): Promise<ContractTransaction>;

  mAsset(overrides?: CallOverrides): Promise<string>;

  migrateBassets(
<<<<<<< HEAD
    _bAssets: string[],
    _newIntegration: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  mint(
    _input: string,
    _inputQuantity: BigNumberish,
    _minOutputQuantity: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  mintMulti(
    _inputs: string[],
    _inputQuantities: BigNumberish[],
    _minOutputQuantity: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> },
=======
    _bAssets: PromiseOrValue<string>[],
    _newIntegration: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mint(
    _input: PromiseOrValue<string>,
    _inputQuantity: PromiseOrValue<BigNumberish>,
    _minOutputQuantity: PromiseOrValue<BigNumberish>,
    _recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintMulti(
    _inputs: PromiseOrValue<string>[],
    _inputQuantities: PromiseOrValue<BigNumberish>[],
    _minOutputQuantity: PromiseOrValue<BigNumberish>,
    _recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nexus(overrides?: CallOverrides): Promise<string>;

<<<<<<< HEAD
  pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;
=======
  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;
>>>>>>> c15f0091 (chore: update update)

  paused(overrides?: CallOverrides): Promise<boolean>;

  redeem(
<<<<<<< HEAD
    _output: string,
    _fpTokenQuantity: BigNumberish,
    _minOutputQuantity: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  redeemExactBassets(
    _outputs: string[],
    _outputQuantities: BigNumberish[],
    _maxInputQuantity: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  redeemProportionately(
    _inputQuantity: BigNumberish,
    _minOutputQuantities: BigNumberish[],
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setCacheSize(
    _cacheSize: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setFees(
    _swapFee: BigNumberish,
    _redemptionFee: BigNumberish,
    _govFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setWeightLimits(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  startRampA(
    _targetA: BigNumberish,
    _rampEndTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  stopRampA(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  swap(
    _input: string,
    _output: string,
    _inputQuantity: BigNumberish,
    _minOutputQuantity: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> },
=======
    _output: PromiseOrValue<string>,
    _fpTokenQuantity: PromiseOrValue<BigNumberish>,
    _minOutputQuantity: PromiseOrValue<BigNumberish>,
    _recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemExactBassets(
    _outputs: PromiseOrValue<string>[],
    _outputQuantities: PromiseOrValue<BigNumberish>[],
    _maxInputQuantity: PromiseOrValue<BigNumberish>,
    _recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemProportionately(
    _inputQuantity: PromiseOrValue<BigNumberish>,
    _minOutputQuantities: PromiseOrValue<BigNumberish>[],
    _recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCacheSize(
    _cacheSize: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFees(
    _swapFee: PromiseOrValue<BigNumberish>,
    _redemptionFee: PromiseOrValue<BigNumberish>,
    _govFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWeightLimits(
    _min: PromiseOrValue<BigNumberish>,
    _max: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startRampA(
    _targetA: PromiseOrValue<BigNumberish>,
    _rampEndTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stopRampA(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swap(
    _input: PromiseOrValue<string>,
    _output: PromiseOrValue<string>,
    _inputQuantity: PromiseOrValue<BigNumberish>,
    _minOutputQuantity: PromiseOrValue<BigNumberish>,
    _recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
<<<<<<< HEAD
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  callStatic: {
    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;
=======
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
>>>>>>> c15f0091 (chore: update update)

    collectPendingFees(overrides?: CallOverrides): Promise<void>;

    collectPlatformInterest(
<<<<<<< HEAD
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { mintAmount: BigNumber; newSupply: BigNumber }>;

    data(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, AmpDataStructOutput, WeightLimitsStructOutput] & {
=======
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { mintAmount: BigNumber; newSupply: BigNumber }
    >;

    data(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        AmpDataStructOutput,
        WeightLimitsStructOutput
      ] & {
>>>>>>> c15f0091 (chore: update update)
        swapFee: BigNumber;
        redemptionFee: BigNumber;
        govFee: BigNumber;
        pendingFees: BigNumber;
        cacheSize: BigNumber;
        ampData: AmpDataStructOutput;
        weightLimits: WeightLimitsStructOutput;
      }
    >;

    decimals(overrides?: CallOverrides): Promise<number>;

<<<<<<< HEAD
    decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    getBasset(
      _bAsset: string,
      overrides?: CallOverrides,
=======
    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getBasset(
      _bAsset: PromiseOrValue<string>,
      overrides?: CallOverrides
>>>>>>> c15f0091 (chore: update update)
    ): Promise<
      [BassetPersonalStructOutput, BassetDataStructOutput] & {
        personal: BassetPersonalStructOutput;
        vaultData: BassetDataStructOutput;
      }
    >;

<<<<<<< HEAD
    getBassets(overrides?: CallOverrides): Promise<
=======
    getBassets(
      overrides?: CallOverrides
    ): Promise<
>>>>>>> c15f0091 (chore: update update)
      [BassetPersonalStructOutput[], BassetDataStructOutput[]] & {
        vaultData: BassetDataStructOutput[];
      }
    >;

    getConfig(overrides?: CallOverrides): Promise<FeederConfigStructOutput>;

    getMintMultiOutput(
<<<<<<< HEAD
      _inputs: string[],
      _inputQuantities: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getMintOutput(_input: string, _inputQuantity: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { price: BigNumber; k: BigNumber }>;

    getRedeemExactBassetsOutput(
      _outputs: string[],
      _outputQuantities: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRedeemOutput(_output: string, _fpTokenQuantity: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getSwapOutput(
      _input: string,
      _output: string,
      _inputQuantity: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    initialize(
      _nameArg: string,
      _symbolArg: string,
      _mAsset: BassetPersonalStruct,
      _fAsset: BassetPersonalStruct,
      _mpAssets: string[],
      _config: InvariantConfigStruct,
      overrides?: CallOverrides,
=======
      _inputs: PromiseOrValue<string>[],
      _inputQuantities: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMintOutput(
      _input: PromiseOrValue<string>,
      _inputQuantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { price: BigNumber; k: BigNumber }>;

    getRedeemExactBassetsOutput(
      _outputs: PromiseOrValue<string>[],
      _outputQuantities: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedeemOutput(
      _output: PromiseOrValue<string>,
      _fpTokenQuantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapOutput(
      _input: PromiseOrValue<string>,
      _output: PromiseOrValue<string>,
      _inputQuantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _nameArg: PromiseOrValue<string>,
      _symbolArg: PromiseOrValue<string>,
      _mAsset: BassetPersonalStruct,
      _fAsset: BassetPersonalStruct,
      _mpAssets: PromiseOrValue<string>[],
      _config: InvariantConfigStruct,
      overrides?: CallOverrides
>>>>>>> c15f0091 (chore: update update)
    ): Promise<void>;

    mAsset(overrides?: CallOverrides): Promise<string>;

<<<<<<< HEAD
    migrateBassets(_bAssets: string[], _newIntegration: string, overrides?: CallOverrides): Promise<void>;

    mint(
      _input: string,
      _inputQuantity: BigNumberish,
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    mintMulti(
      _inputs: string[],
      _inputQuantities: BigNumberish[],
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides,
=======
    migrateBassets(
      _bAssets: PromiseOrValue<string>[],
      _newIntegration: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      _input: PromiseOrValue<string>,
      _inputQuantity: PromiseOrValue<BigNumberish>,
      _minOutputQuantity: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintMulti(
      _inputs: PromiseOrValue<string>[],
      _inputQuantities: PromiseOrValue<BigNumberish>[],
      _minOutputQuantity: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
>>>>>>> c15f0091 (chore: update update)
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nexus(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    redeem(
<<<<<<< HEAD
      _output: string,
      _fpTokenQuantity: BigNumberish,
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    redeemExactBassets(
      _outputs: string[],
      _outputQuantities: BigNumberish[],
      _maxInputQuantity: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    redeemProportionately(
      _inputQuantity: BigNumberish,
      _minOutputQuantities: BigNumberish[],
      _recipient: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    setCacheSize(_cacheSize: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setFees(
      _swapFee: BigNumberish,
      _redemptionFee: BigNumberish,
      _govFee: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setWeightLimits(_min: BigNumberish, _max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    startRampA(_targetA: BigNumberish, _rampEndTime: BigNumberish, overrides?: CallOverrides): Promise<void>;
=======
      _output: PromiseOrValue<string>,
      _fpTokenQuantity: PromiseOrValue<BigNumberish>,
      _minOutputQuantity: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemExactBassets(
      _outputs: PromiseOrValue<string>[],
      _outputQuantities: PromiseOrValue<BigNumberish>[],
      _maxInputQuantity: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemProportionately(
      _inputQuantity: PromiseOrValue<BigNumberish>,
      _minOutputQuantities: PromiseOrValue<BigNumberish>[],
      _recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    setCacheSize(
      _cacheSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFees(
      _swapFee: PromiseOrValue<BigNumberish>,
      _redemptionFee: PromiseOrValue<BigNumberish>,
      _govFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWeightLimits(
      _min: PromiseOrValue<BigNumberish>,
      _max: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    startRampA(
      _targetA: PromiseOrValue<BigNumberish>,
      _rampEndTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
>>>>>>> c15f0091 (chore: update update)

    stopRampA(overrides?: CallOverrides): Promise<void>;

    swap(
<<<<<<< HEAD
      _input: string,
      _output: string,
      _inputQuantity: BigNumberish,
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides,
=======
      _input: PromiseOrValue<string>,
      _output: PromiseOrValue<string>,
      _inputQuantity: PromiseOrValue<BigNumberish>,
      _minOutputQuantity: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
>>>>>>> c15f0091 (chore: update update)
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

<<<<<<< HEAD
    transfer(recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferFrom(sender: string, recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
=======
    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
>>>>>>> c15f0091 (chore: update update)

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
<<<<<<< HEAD
    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(owner?: string | null, spender?: string | null, value?: null): ApprovalEventFilter;

    'BassetsMigrated(address[],address)'(bAssets?: null, newIntegrator?: null): BassetsMigratedEventFilter;
    BassetsMigrated(bAssets?: null, newIntegrator?: null): BassetsMigratedEventFilter;

    'CacheSizeChanged(uint256)'(cacheSize?: null): CacheSizeChangedEventFilter;
    CacheSizeChanged(cacheSize?: null): CacheSizeChangedEventFilter;

    'FeesChanged(uint256,uint256,uint256)'(swapFee?: null, redemptionFee?: null, govFee?: null): FeesChangedEventFilter;
    FeesChanged(swapFee?: null, redemptionFee?: null, govFee?: null): FeesChangedEventFilter;

    'Minted(address,address,uint256,address,uint256)'(
      minter?: string | null,
      recipient?: null,
      output?: null,
      input?: null,
      inputQuantity?: null,
    ): MintedEventFilter;
    Minted(
      minter?: string | null,
      recipient?: null,
      output?: null,
      input?: null,
      inputQuantity?: null,
    ): MintedEventFilter;

    'MintedMulti(address,address,uint256,address[],uint256[])'(
      minter?: string | null,
      recipient?: null,
      output?: null,
      inputs?: null,
      inputQuantities?: null,
    ): MintedMultiEventFilter;
    MintedMulti(
      minter?: string | null,
      recipient?: null,
      output?: null,
      inputs?: null,
      inputQuantities?: null,
    ): MintedMultiEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'Redeemed(address,address,uint256,address,uint256,uint256)'(
      redeemer?: string | null,
=======
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "BassetsMigrated(address[],address)"(
      bAssets?: null,
      newIntegrator?: null
    ): BassetsMigratedEventFilter;
    BassetsMigrated(
      bAssets?: null,
      newIntegrator?: null
    ): BassetsMigratedEventFilter;

    "CacheSizeChanged(uint256)"(cacheSize?: null): CacheSizeChangedEventFilter;
    CacheSizeChanged(cacheSize?: null): CacheSizeChangedEventFilter;

    "FeesChanged(uint256,uint256,uint256)"(
      swapFee?: null,
      redemptionFee?: null,
      govFee?: null
    ): FeesChangedEventFilter;
    FeesChanged(
      swapFee?: null,
      redemptionFee?: null,
      govFee?: null
    ): FeesChangedEventFilter;

    "Minted(address,address,uint256,address,uint256)"(
      minter?: PromiseOrValue<string> | null,
      recipient?: null,
      output?: null,
      input?: null,
      inputQuantity?: null
    ): MintedEventFilter;
    Minted(
      minter?: PromiseOrValue<string> | null,
      recipient?: null,
      output?: null,
      input?: null,
      inputQuantity?: null
    ): MintedEventFilter;

    "MintedMulti(address,address,uint256,address[],uint256[])"(
      minter?: PromiseOrValue<string> | null,
      recipient?: null,
      output?: null,
      inputs?: null,
      inputQuantities?: null
    ): MintedMultiEventFilter;
    MintedMulti(
      minter?: PromiseOrValue<string> | null,
      recipient?: null,
      output?: null,
      inputs?: null,
      inputQuantities?: null
    ): MintedMultiEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Redeemed(address,address,uint256,address,uint256,uint256)"(
      redeemer?: PromiseOrValue<string> | null,
>>>>>>> c15f0091 (chore: update update)
      recipient?: null,
      mAssetQuantity?: null,
      output?: null,
      outputQuantity?: null,
<<<<<<< HEAD
      scaledFee?: null,
    ): RedeemedEventFilter;
    Redeemed(
      redeemer?: string | null,
=======
      scaledFee?: null
    ): RedeemedEventFilter;
    Redeemed(
      redeemer?: PromiseOrValue<string> | null,
>>>>>>> c15f0091 (chore: update update)
      recipient?: null,
      mAssetQuantity?: null,
      output?: null,
      outputQuantity?: null,
<<<<<<< HEAD
      scaledFee?: null,
    ): RedeemedEventFilter;

    'RedeemedMulti(address,address,uint256,address[],uint256[],uint256)'(
      redeemer?: string | null,
=======
      scaledFee?: null
    ): RedeemedEventFilter;

    "RedeemedMulti(address,address,uint256,address[],uint256[],uint256)"(
      redeemer?: PromiseOrValue<string> | null,
>>>>>>> c15f0091 (chore: update update)
      recipient?: null,
      mAssetQuantity?: null,
      outputs?: null,
      outputQuantity?: null,
<<<<<<< HEAD
      scaledFee?: null,
    ): RedeemedMultiEventFilter;
    RedeemedMulti(
      redeemer?: string | null,
=======
      scaledFee?: null
    ): RedeemedMultiEventFilter;
    RedeemedMulti(
      redeemer?: PromiseOrValue<string> | null,
>>>>>>> c15f0091 (chore: update update)
      recipient?: null,
      mAssetQuantity?: null,
      outputs?: null,
      outputQuantity?: null,
<<<<<<< HEAD
      scaledFee?: null,
    ): RedeemedMultiEventFilter;

    'StartRampA(uint256,uint256,uint256,uint256)'(
      currentA?: null,
      targetA?: null,
      startTime?: null,
      rampEndTime?: null,
    ): StartRampAEventFilter;
    StartRampA(currentA?: null, targetA?: null, startTime?: null, rampEndTime?: null): StartRampAEventFilter;

    'StopRampA(uint256,uint256)'(currentA?: null, time?: null): StopRampAEventFilter;
    StopRampA(currentA?: null, time?: null): StopRampAEventFilter;

    'Swapped(address,address,address,uint256,uint256,address)'(
      swapper?: string | null,
=======
      scaledFee?: null
    ): RedeemedMultiEventFilter;

    "StartRampA(uint256,uint256,uint256,uint256)"(
      currentA?: null,
      targetA?: null,
      startTime?: null,
      rampEndTime?: null
    ): StartRampAEventFilter;
    StartRampA(
      currentA?: null,
      targetA?: null,
      startTime?: null,
      rampEndTime?: null
    ): StartRampAEventFilter;

    "StopRampA(uint256,uint256)"(
      currentA?: null,
      time?: null
    ): StopRampAEventFilter;
    StopRampA(currentA?: null, time?: null): StopRampAEventFilter;

    "Swapped(address,address,address,uint256,uint256,address)"(
      swapper?: PromiseOrValue<string> | null,
>>>>>>> c15f0091 (chore: update update)
      input?: null,
      output?: null,
      outputAmount?: null,
      fee?: null,
<<<<<<< HEAD
      recipient?: null,
    ): SwappedEventFilter;
    Swapped(
      swapper?: string | null,
=======
      recipient?: null
    ): SwappedEventFilter;
    Swapped(
      swapper?: PromiseOrValue<string> | null,
>>>>>>> c15f0091 (chore: update update)
      input?: null,
      output?: null,
      outputAmount?: null,
      fee?: null,
<<<<<<< HEAD
      recipient?: null,
    ): SwappedEventFilter;

    'Transfer(address,address,uint256)'(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
    Transfer(from?: string | null, to?: string | null, value?: null): TransferEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    'WeightLimitsChanged(uint128,uint128)'(min?: null, max?: null): WeightLimitsChangedEventFilter;
=======
      recipient?: null
    ): SwappedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "WeightLimitsChanged(uint128,uint128)"(
      min?: null,
      max?: null
    ): WeightLimitsChangedEventFilter;
>>>>>>> c15f0091 (chore: update update)
    WeightLimitsChanged(min?: null, max?: null): WeightLimitsChangedEventFilter;
  };

  estimateGas: {
<<<<<<< HEAD
    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    collectPendingFees(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    collectPlatformInterest(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
=======
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectPendingFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectPlatformInterest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
>>>>>>> c15f0091 (chore: update update)

    data(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
<<<<<<< HEAD
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getBasset(_bAsset: string, overrides?: CallOverrides): Promise<BigNumber>;
=======
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBasset(
      _bAsset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
>>>>>>> c15f0091 (chore: update update)

    getBassets(overrides?: CallOverrides): Promise<BigNumber>;

    getConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getMintMultiOutput(
<<<<<<< HEAD
      _inputs: string[],
      _inputQuantities: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getMintOutput(_input: string, _inputQuantity: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
=======
      _inputs: PromiseOrValue<string>[],
      _inputQuantities: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMintOutput(
      _input: PromiseOrValue<string>,
      _inputQuantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
>>>>>>> c15f0091 (chore: update update)

    getPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getRedeemExactBassetsOutput(
<<<<<<< HEAD
      _outputs: string[],
      _outputQuantities: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRedeemOutput(_output: string, _fpTokenQuantity: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getSwapOutput(
      _input: string,
      _output: string,
      _inputQuantity: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    initialize(
      _nameArg: string,
      _symbolArg: string,
      _mAsset: BassetPersonalStruct,
      _fAsset: BassetPersonalStruct,
      _mpAssets: string[],
      _config: InvariantConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      _outputs: PromiseOrValue<string>[],
      _outputQuantities: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedeemOutput(
      _output: PromiseOrValue<string>,
      _fpTokenQuantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapOutput(
      _input: PromiseOrValue<string>,
      _output: PromiseOrValue<string>,
      _inputQuantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _nameArg: PromiseOrValue<string>,
      _symbolArg: PromiseOrValue<string>,
      _mAsset: BassetPersonalStruct,
      _fAsset: BassetPersonalStruct,
      _mpAssets: PromiseOrValue<string>[],
      _config: InvariantConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
    ): Promise<BigNumber>;

    mAsset(overrides?: CallOverrides): Promise<BigNumber>;

    migrateBassets(
<<<<<<< HEAD
      _bAssets: string[],
      _newIntegration: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    mint(
      _input: string,
      _inputQuantity: BigNumberish,
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    mintMulti(
      _inputs: string[],
      _inputQuantities: BigNumberish[],
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      _bAssets: PromiseOrValue<string>[],
      _newIntegration: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mint(
      _input: PromiseOrValue<string>,
      _inputQuantity: PromiseOrValue<BigNumberish>,
      _minOutputQuantity: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintMulti(
      _inputs: PromiseOrValue<string>[],
      _inputQuantities: PromiseOrValue<BigNumberish>[],
      _minOutputQuantity: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nexus(overrides?: CallOverrides): Promise<BigNumber>;

<<<<<<< HEAD
    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
=======
    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
>>>>>>> c15f0091 (chore: update update)

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
<<<<<<< HEAD
      _output: string,
      _fpTokenQuantity: BigNumberish,
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    redeemExactBassets(
      _outputs: string[],
      _outputQuantities: BigNumberish[],
      _maxInputQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    redeemProportionately(
      _inputQuantity: BigNumberish,
      _minOutputQuantities: BigNumberish[],
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setCacheSize(
      _cacheSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setFees(
      _swapFee: BigNumberish,
      _redemptionFee: BigNumberish,
      _govFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setWeightLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    startRampA(
      _targetA: BigNumberish,
      _rampEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    stopRampA(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    swap(
      _input: string,
      _output: string,
      _inputQuantity: BigNumberish,
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      _output: PromiseOrValue<string>,
      _fpTokenQuantity: PromiseOrValue<BigNumberish>,
      _minOutputQuantity: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemExactBassets(
      _outputs: PromiseOrValue<string>[],
      _outputQuantities: PromiseOrValue<BigNumberish>[],
      _maxInputQuantity: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemProportionately(
      _inputQuantity: PromiseOrValue<BigNumberish>,
      _minOutputQuantities: PromiseOrValue<BigNumberish>[],
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCacheSize(
      _cacheSize: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFees(
      _swapFee: PromiseOrValue<BigNumberish>,
      _redemptionFee: PromiseOrValue<BigNumberish>,
      _govFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWeightLimits(
      _min: PromiseOrValue<BigNumberish>,
      _max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startRampA(
      _targetA: PromiseOrValue<BigNumberish>,
      _rampEndTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stopRampA(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swap(
      _input: PromiseOrValue<string>,
      _output: PromiseOrValue<string>,
      _inputQuantity: PromiseOrValue<BigNumberish>,
      _minOutputQuantity: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
<<<<<<< HEAD
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectPendingFees(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    collectPlatformInterest(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;
=======
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectPendingFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectPlatformInterest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
>>>>>>> c15f0091 (chore: update update)

    data(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
<<<<<<< HEAD
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getBasset(_bAsset: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
=======
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBasset(
      _bAsset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
>>>>>>> c15f0091 (chore: update update)

    getBassets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMintMultiOutput(
<<<<<<< HEAD
      _inputs: string[],
      _inputQuantities: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getMintOutput(
      _input: string,
      _inputQuantity: BigNumberish,
      overrides?: CallOverrides,
=======
      _inputs: PromiseOrValue<string>[],
      _inputQuantities: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMintOutput(
      _input: PromiseOrValue<string>,
      _inputQuantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
>>>>>>> c15f0091 (chore: update update)
    ): Promise<PopulatedTransaction>;

    getPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRedeemExactBassetsOutput(
<<<<<<< HEAD
      _outputs: string[],
      _outputQuantities: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRedeemOutput(
      _output: string,
      _fpTokenQuantity: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getSwapOutput(
      _input: string,
      _output: string,
      _inputQuantity: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      _nameArg: string,
      _symbolArg: string,
      _mAsset: BassetPersonalStruct,
      _fAsset: BassetPersonalStruct,
      _mpAssets: string[],
      _config: InvariantConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      _outputs: PromiseOrValue<string>[],
      _outputQuantities: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedeemOutput(
      _output: PromiseOrValue<string>,
      _fpTokenQuantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapOutput(
      _input: PromiseOrValue<string>,
      _output: PromiseOrValue<string>,
      _inputQuantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _nameArg: PromiseOrValue<string>,
      _symbolArg: PromiseOrValue<string>,
      _mAsset: BassetPersonalStruct,
      _fAsset: BassetPersonalStruct,
      _mpAssets: PromiseOrValue<string>[],
      _config: InvariantConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
    ): Promise<PopulatedTransaction>;

    mAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateBassets(
<<<<<<< HEAD
      _bAssets: string[],
      _newIntegration: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    mint(
      _input: string,
      _inputQuantity: BigNumberish,
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    mintMulti(
      _inputs: string[],
      _inputQuantities: BigNumberish[],
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      _bAssets: PromiseOrValue<string>[],
      _newIntegration: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      _input: PromiseOrValue<string>,
      _inputQuantity: PromiseOrValue<BigNumberish>,
      _minOutputQuantity: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintMulti(
      _inputs: PromiseOrValue<string>[],
      _inputQuantities: PromiseOrValue<BigNumberish>[],
      _minOutputQuantity: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nexus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

<<<<<<< HEAD
    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;
=======
    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
>>>>>>> c15f0091 (chore: update update)

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
<<<<<<< HEAD
      _output: string,
      _fpTokenQuantity: BigNumberish,
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    redeemExactBassets(
      _outputs: string[],
      _outputQuantities: BigNumberish[],
      _maxInputQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    redeemProportionately(
      _inputQuantity: BigNumberish,
      _minOutputQuantities: BigNumberish[],
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setCacheSize(
      _cacheSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setFees(
      _swapFee: BigNumberish,
      _redemptionFee: BigNumberish,
      _govFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setWeightLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    startRampA(
      _targetA: BigNumberish,
      _rampEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    stopRampA(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    swap(
      _input: string,
      _output: string,
      _inputQuantity: BigNumberish,
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      _output: PromiseOrValue<string>,
      _fpTokenQuantity: PromiseOrValue<BigNumberish>,
      _minOutputQuantity: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemExactBassets(
      _outputs: PromiseOrValue<string>[],
      _outputQuantities: PromiseOrValue<BigNumberish>[],
      _maxInputQuantity: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemProportionately(
      _inputQuantity: PromiseOrValue<BigNumberish>,
      _minOutputQuantities: PromiseOrValue<BigNumberish>[],
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCacheSize(
      _cacheSize: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFees(
      _swapFee: PromiseOrValue<BigNumberish>,
      _redemptionFee: PromiseOrValue<BigNumberish>,
      _govFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWeightLimits(
      _min: PromiseOrValue<BigNumberish>,
      _max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startRampA(
      _targetA: PromiseOrValue<BigNumberish>,
      _rampEndTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stopRampA(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      _input: PromiseOrValue<string>,
      _output: PromiseOrValue<string>,
      _inputQuantity: PromiseOrValue<BigNumberish>,
      _minOutputQuantity: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
<<<<<<< HEAD
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;
=======
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
>>>>>>> c15f0091 (chore: update update)
  };
}
