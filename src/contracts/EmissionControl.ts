/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
<<<<<<< HEAD
import {
=======
import type {
>>>>>>> c15f0091 (chore: update update)
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
<<<<<<< HEAD
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface EmissionControlInterface extends utils.Interface {
  contractName: 'EmissionControl';
  functions: {
    'MAX_BPS()': FunctionFragment;
    'addManager(address)': FunctionFragment;
    'boostedEmissionRate(address)': FunctionFragment;
    'manager(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'proRataEmissionRate(address)': FunctionFragment;
    'removeManager(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setBoostedEmission(address,uint256)': FunctionFragment;
    'setTokenWeight(address,uint256)': FunctionFragment;
    'tokenWeight(address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'MAX_BPS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addManager', values: [string]): string;
  encodeFunctionData(functionFragment: 'boostedEmissionRate', values: [string]): string;
  encodeFunctionData(functionFragment: 'manager', values: [string]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'proRataEmissionRate', values: [string]): string;
  encodeFunctionData(functionFragment: 'removeManager', values: [string]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setBoostedEmission', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setTokenWeight', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'tokenWeight', values: [string]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;

  decodeFunctionResult(functionFragment: 'MAX_BPS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'boostedEmissionRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'manager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proRataEmissionRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBoostedEmission', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTokenWeight', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenWeight', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;

  events: {
    'OwnershipTransferred(address,address)': EventFragment;
    'TokenBoostedEmissionChanged(address,uint256)': EventFragment;
    'TokenWeightChanged(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenBoostedEmissionChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenWeightChanged'): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<[string, string], { previousOwner: string; newOwner: string }>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export type TokenBoostedEmissionChangedEvent = TypedEvent<[string, BigNumber], { _vault: string; _weight: BigNumber }>;

export type TokenBoostedEmissionChangedEventFilter = TypedEventFilter<TokenBoostedEmissionChangedEvent>;

export type TokenWeightChangedEvent = TypedEvent<[string, BigNumber], { _token: string; _weight: BigNumber }>;

export type TokenWeightChangedEventFilter = TypedEventFilter<TokenWeightChangedEvent>;

export interface EmissionControl extends BaseContract {
  contractName: 'EmissionControl';
=======
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface EmissionControlInterface extends utils.Interface {
  functions: {
    "MAX_BPS()": FunctionFragment;
    "addManager(address)": FunctionFragment;
    "boostedEmissionRate(address)": FunctionFragment;
    "manager(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "proRataEmissionRate(address)": FunctionFragment;
    "removeManager(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBoostedEmission(address,uint256)": FunctionFragment;
    "setTokenWeight(address,uint256)": FunctionFragment;
    "tokenWeight(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_BPS"
      | "addManager"
      | "boostedEmissionRate"
      | "manager"
      | "owner"
      | "proRataEmissionRate"
      | "removeManager"
      | "renounceOwnership"
      | "setBoostedEmission"
      | "setTokenWeight"
      | "tokenWeight"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "MAX_BPS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "boostedEmissionRate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "manager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proRataEmissionRate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBoostedEmission",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenWeight",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenWeight",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_BPS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "boostedEmissionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proRataEmissionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBoostedEmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "TokenBoostedEmissionChanged(address,uint256)": EventFragment;
    "TokenWeightChanged(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TokenBoostedEmissionChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenWeightChanged"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TokenBoostedEmissionChangedEventObject {
  _vault: string;
  _weight: BigNumber;
}
export type TokenBoostedEmissionChangedEvent = TypedEvent<
  [string, BigNumber],
  TokenBoostedEmissionChangedEventObject
>;

export type TokenBoostedEmissionChangedEventFilter =
  TypedEventFilter<TokenBoostedEmissionChangedEvent>;

export interface TokenWeightChangedEventObject {
  _token: string;
  _weight: BigNumber;
}
export type TokenWeightChangedEvent = TypedEvent<
  [string, BigNumber],
  TokenWeightChangedEventObject
>;

export type TokenWeightChangedEventFilter =
  TypedEventFilter<TokenWeightChangedEvent>;

export interface EmissionControl extends BaseContract {
>>>>>>> c15f0091 (chore: update update)
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EmissionControlInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
<<<<<<< HEAD
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
=======
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
>>>>>>> c15f0091 (chore: update update)
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_BPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    addManager(
<<<<<<< HEAD
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    boostedEmissionRate(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    manager(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proRataEmissionRate(_vault: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    removeManager(
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setBoostedEmission(
      _vault: string,
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setTokenWeight(
      _token: string,
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    tokenWeight(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      _manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    boostedEmissionRate(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    manager(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proRataEmissionRate(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeManager(
      _manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBoostedEmission(
      _vault: PromiseOrValue<string>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenWeight(
      _token: PromiseOrValue<string>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenWeight(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
    ): Promise<ContractTransaction>;
  };

  MAX_BPS(overrides?: CallOverrides): Promise<BigNumber>;

  addManager(
<<<<<<< HEAD
    _manager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  boostedEmissionRate(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  manager(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  proRataEmissionRate(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

  removeManager(
    _manager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setBoostedEmission(
    _vault: string,
    _weight: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setTokenWeight(
    _token: string,
    _weight: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  tokenWeight(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
=======
    _manager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  boostedEmissionRate(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  manager(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  proRataEmissionRate(
    _vault: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeManager(
    _manager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBoostedEmission(
    _vault: PromiseOrValue<string>,
    _weight: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenWeight(
    _token: PromiseOrValue<string>,
    _weight: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenWeight(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_BPS(overrides?: CallOverrides): Promise<BigNumber>;

<<<<<<< HEAD
    addManager(_manager: string, overrides?: CallOverrides): Promise<void>;

    boostedEmissionRate(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    manager(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    proRataEmissionRate(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeManager(_manager: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBoostedEmission(_vault: string, _weight: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setTokenWeight(_token: string, _weight: BigNumberish, overrides?: CallOverrides): Promise<void>;

    tokenWeight(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

    'TokenBoostedEmissionChanged(address,uint256)'(
      _vault?: string | null,
      _weight?: BigNumberish | null,
    ): TokenBoostedEmissionChangedEventFilter;
    TokenBoostedEmissionChanged(
      _vault?: string | null,
      _weight?: BigNumberish | null,
    ): TokenBoostedEmissionChangedEventFilter;

    'TokenWeightChanged(address,uint256)'(
      _token?: string | null,
      _weight?: BigNumberish | null,
    ): TokenWeightChangedEventFilter;
    TokenWeightChanged(_token?: string | null, _weight?: BigNumberish | null): TokenWeightChangedEventFilter;
=======
    addManager(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    boostedEmissionRate(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    manager(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    proRataEmissionRate(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeManager(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBoostedEmission(
      _vault: PromiseOrValue<string>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenWeight(
      _token: PromiseOrValue<string>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenWeight(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "TokenBoostedEmissionChanged(address,uint256)"(
      _vault?: PromiseOrValue<string> | null,
      _weight?: PromiseOrValue<BigNumberish> | null
    ): TokenBoostedEmissionChangedEventFilter;
    TokenBoostedEmissionChanged(
      _vault?: PromiseOrValue<string> | null,
      _weight?: PromiseOrValue<BigNumberish> | null
    ): TokenBoostedEmissionChangedEventFilter;

    "TokenWeightChanged(address,uint256)"(
      _token?: PromiseOrValue<string> | null,
      _weight?: PromiseOrValue<BigNumberish> | null
    ): TokenWeightChangedEventFilter;
    TokenWeightChanged(
      _token?: PromiseOrValue<string> | null,
      _weight?: PromiseOrValue<BigNumberish> | null
    ): TokenWeightChangedEventFilter;
>>>>>>> c15f0091 (chore: update update)
  };

  estimateGas: {
    MAX_BPS(overrides?: CallOverrides): Promise<BigNumber>;

<<<<<<< HEAD
    addManager(_manager: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    boostedEmissionRate(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    manager(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proRataEmissionRate(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeManager(_manager: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setBoostedEmission(
      _vault: string,
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setTokenWeight(
      _token: string,
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    tokenWeight(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
=======
    addManager(
      _manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    boostedEmissionRate(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    manager(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proRataEmissionRate(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeManager(
      _manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBoostedEmission(
      _vault: PromiseOrValue<string>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenWeight(
      _token: PromiseOrValue<string>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenWeight(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_BPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addManager(
<<<<<<< HEAD
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    boostedEmissionRate(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manager(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proRataEmissionRate(_vault: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeManager(
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    setBoostedEmission(
      _vault: string,
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setTokenWeight(
      _token: string,
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    tokenWeight(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      _manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    boostedEmissionRate(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    manager(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proRataEmissionRate(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeManager(
      _manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBoostedEmission(
      _vault: PromiseOrValue<string>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenWeight(
      _token: PromiseOrValue<string>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenWeight(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
    ): Promise<PopulatedTransaction>;
  };
}
