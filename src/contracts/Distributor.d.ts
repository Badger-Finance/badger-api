/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface DistributorInterface extends ethers.utils.Interface {
  functions: {
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'GUARDIAN_ROLE()': FunctionFragment;
    'ROOT_UPDATER_ROLE()': FunctionFragment;
    'approveRoot(bytes32,bytes32,uint256)': FunctionFragment;
    'claim(address[],uint256[],uint256,uint256,bytes32[])': FunctionFragment;
    'claimed(address,address)': FunctionFragment;
    'currentCycle()': FunctionFragment;
    'encodeClaim(address[],uint256[],uint256,uint256)': FunctionFragment;
    'getClaimedFor(address,address[])': FunctionFragment;
    'getCurrentMerkleData()': FunctionFragment;
    'getPendingMerkleData()': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'getRoleMember(bytes32,uint256)': FunctionFragment;
    'getRoleMemberCount(bytes32)': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasPendingRoot()': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'initialize(address,address,address)': FunctionFragment;
    'lastProposeBlockNumber()': FunctionFragment;
    'lastProposeTimestamp()': FunctionFragment;
    'lastPublishBlockNumber()': FunctionFragment;
    'lastPublishTimestamp()': FunctionFragment;
    'merkleContentHash()': FunctionFragment;
    'merkleRoot()': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'pendingCycle()': FunctionFragment;
    'pendingMerkleContentHash()': FunctionFragment;
    'pendingMerkleRoot()': FunctionFragment;
    'proposeRoot(bytes32,bytes32,uint256)': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'totalClaimed(address)': FunctionFragment;
    'unpause()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'GUARDIAN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ROOT_UPDATER_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'approveRoot', values: [BytesLike, BytesLike, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'claim',
    values: [string[], BigNumberish[], BigNumberish, BigNumberish, BytesLike[]],
  ): string;
  encodeFunctionData(functionFragment: 'claimed', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'currentCycle', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'encodeClaim',
    values: [string[], BigNumberish[], BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'getClaimedFor', values: [string, string[]]): string;
  encodeFunctionData(functionFragment: 'getCurrentMerkleData', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPendingMerkleData', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'getRoleMember', values: [BytesLike, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getRoleMemberCount', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'hasPendingRoot', values?: undefined): string;
  encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'initialize', values: [string, string, string]): string;
  encodeFunctionData(functionFragment: 'lastProposeBlockNumber', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastProposeTimestamp', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastPublishBlockNumber', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastPublishTimestamp', values?: undefined): string;
  encodeFunctionData(functionFragment: 'merkleContentHash', values?: undefined): string;
  encodeFunctionData(functionFragment: 'merkleRoot', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingCycle', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingMerkleContentHash', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingMerkleRoot', values?: undefined): string;
  encodeFunctionData(functionFragment: 'proposeRoot', values: [BytesLike, BytesLike, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'totalClaimed', values: [string]): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'GUARDIAN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ROOT_UPDATER_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approveRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentCycle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'encodeClaim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getClaimedFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCurrentMerkleData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPendingMerkleData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleMember', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleMemberCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasPendingRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastProposeBlockNumber', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastProposeTimestamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastPublishBlockNumber', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastPublishTimestamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'merkleContentHash', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'merkleRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingCycle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingMerkleContentHash', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingMerkleRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proposeRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalClaimed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;

  events: {
    'Claimed(address,address,uint256,uint256,uint256,uint256)': EventFragment;
    'InsufficientFundsForRoot(bytes32)': EventFragment;
    'Paused(address)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'RootProposed(uint256,bytes32,bytes32,uint256,uint256)': EventFragment;
    'RootUpdated(uint256,bytes32,bytes32,uint256,uint256)': EventFragment;
    'Unpaused(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Claimed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InsufficientFundsForRoot'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RootProposed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RootUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
}

export class Distributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DistributorInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    GUARDIAN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    ROOT_UPDATER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    approveRoot(
      root: BytesLike,
      contentHash: BytesLike,
      cycle: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    claim(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      index: BigNumberish,
      cycle: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    claimed(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    currentCycle(overrides?: CallOverrides): Promise<[BigNumber]>;

    encodeClaim(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      index: BigNumberish,
      cycle: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string, string] & { encoded: string; hash: string }>;

    getClaimedFor(user: string, tokens: string[], overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

    getCurrentMerkleData(overrides?: CallOverrides): Promise<
      [
        [string, string, BigNumber, BigNumber] & {
          root: string;
          contentHash: string;
          timestamp: BigNumber;
          blockNumber: BigNumber;
        },
      ]
    >;

    getPendingMerkleData(overrides?: CallOverrides): Promise<
      [
        [string, string, BigNumber, BigNumber] & {
          root: string;
          contentHash: string;
          timestamp: BigNumber;
          blockNumber: BigNumber;
        },
      ]
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getRoleMemberCount(role: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    hasPendingRoot(overrides?: CallOverrides): Promise<[boolean]>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      admin: string,
      initialUpdater: string,
      initialGuardian: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    lastProposeBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastProposeTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastPublishBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastPublishTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    merkleContentHash(overrides?: CallOverrides): Promise<[string]>;

    merkleRoot(overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingCycle(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingMerkleContentHash(overrides?: CallOverrides): Promise<[string]>;

    pendingMerkleRoot(overrides?: CallOverrides): Promise<[string]>;

    proposeRoot(
      root: BytesLike,
      contentHash: BytesLike,
      cycle: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    totalClaimed(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  GUARDIAN_ROLE(overrides?: CallOverrides): Promise<string>;

  ROOT_UPDATER_ROLE(overrides?: CallOverrides): Promise<string>;

  approveRoot(
    root: BytesLike,
    contentHash: BytesLike,
    cycle: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  claim(
    tokens: string[],
    cumulativeAmounts: BigNumberish[],
    index: BigNumberish,
    cycle: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  claimed(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  currentCycle(overrides?: CallOverrides): Promise<BigNumber>;

  encodeClaim(
    tokens: string[],
    cumulativeAmounts: BigNumberish[],
    index: BigNumberish,
    cycle: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[string, string] & { encoded: string; hash: string }>;

  getClaimedFor(user: string, tokens: string[], overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

  getCurrentMerkleData(overrides?: CallOverrides): Promise<
    [string, string, BigNumber, BigNumber] & {
      root: string;
      contentHash: string;
      timestamp: BigNumber;
      blockNumber: BigNumber;
    }
  >;

  getPendingMerkleData(overrides?: CallOverrides): Promise<
    [string, string, BigNumber, BigNumber] & {
      root: string;
      contentHash: string;
      timestamp: BigNumber;
      blockNumber: BigNumber;
    }
  >;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getRoleMemberCount(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  hasPendingRoot(overrides?: CallOverrides): Promise<boolean>;

  hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

  initialize(
    admin: string,
    initialUpdater: string,
    initialGuardian: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  lastProposeBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  lastProposeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  lastPublishBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  lastPublishTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  merkleContentHash(overrides?: CallOverrides): Promise<string>;

  merkleRoot(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingCycle(overrides?: CallOverrides): Promise<BigNumber>;

  pendingMerkleContentHash(overrides?: CallOverrides): Promise<string>;

  pendingMerkleRoot(overrides?: CallOverrides): Promise<string>;

  proposeRoot(
    root: BytesLike,
    contentHash: BytesLike,
    cycle: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  totalClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    GUARDIAN_ROLE(overrides?: CallOverrides): Promise<string>;

    ROOT_UPDATER_ROLE(overrides?: CallOverrides): Promise<string>;

    approveRoot(root: BytesLike, contentHash: BytesLike, cycle: BigNumberish, overrides?: CallOverrides): Promise<void>;

    claim(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      index: BigNumberish,
      cycle: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<void>;

    claimed(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    currentCycle(overrides?: CallOverrides): Promise<BigNumber>;

    encodeClaim(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      index: BigNumberish,
      cycle: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string, string] & { encoded: string; hash: string }>;

    getClaimedFor(user: string, tokens: string[], overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

    getCurrentMerkleData(overrides?: CallOverrides): Promise<
      [string, string, BigNumber, BigNumber] & {
        root: string;
        contentHash: string;
        timestamp: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    getPendingMerkleData(overrides?: CallOverrides): Promise<
      [string, string, BigNumber, BigNumber] & {
        root: string;
        contentHash: string;
        timestamp: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getRoleMemberCount(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    hasPendingRoot(overrides?: CallOverrides): Promise<boolean>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

    initialize(
      admin: string,
      initialUpdater: string,
      initialGuardian: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    lastProposeBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    lastProposeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    lastPublishBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    lastPublishTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    merkleContentHash(overrides?: CallOverrides): Promise<string>;

    merkleRoot(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingCycle(overrides?: CallOverrides): Promise<BigNumber>;

    pendingMerkleContentHash(overrides?: CallOverrides): Promise<string>;

    pendingMerkleRoot(overrides?: CallOverrides): Promise<string>;

    proposeRoot(root: BytesLike, contentHash: BytesLike, cycle: BigNumberish, overrides?: CallOverrides): Promise<void>;

    renounceRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    revokeRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    totalClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    Claimed(
      user?: string | null,
      token?: string | null,
      amount?: null,
      cycle?: BigNumberish | null,
      timestamp?: null,
      blockNumber?: null,
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        token: string;
        amount: BigNumber;
        cycle: BigNumber;
        timestamp: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    InsufficientFundsForRoot(root?: BytesLike | null): TypedEventFilter<[string], { root: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): TypedEventFilter<[string, string, string], { role: string; previousAdminRole: string; newAdminRole: string }>;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): TypedEventFilter<[string, string, string], { role: string; account: string; sender: string }>;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): TypedEventFilter<[string, string, string], { role: string; account: string; sender: string }>;

    RootProposed(
      cycle?: BigNumberish | null,
      root?: BytesLike | null,
      contentHash?: BytesLike | null,
      timestamp?: null,
      blockNumber?: null,
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber],
      {
        cycle: BigNumber;
        root: string;
        contentHash: string;
        timestamp: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    RootUpdated(
      cycle?: BigNumberish | null,
      root?: BytesLike | null,
      contentHash?: BytesLike | null,
      timestamp?: null,
      blockNumber?: null,
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber],
      {
        cycle: BigNumber;
        root: string;
        contentHash: string;
        timestamp: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    GUARDIAN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT_UPDATER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    approveRoot(
      root: BytesLike,
      contentHash: BytesLike,
      cycle: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    claim(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      index: BigNumberish,
      cycle: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    claimed(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    currentCycle(overrides?: CallOverrides): Promise<BigNumber>;

    encodeClaim(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      index: BigNumberish,
      cycle: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getClaimedFor(user: string, tokens: string[], overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentMerkleData(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingMerkleData(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleMember(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleMemberCount(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    hasPendingRoot(overrides?: CallOverrides): Promise<BigNumber>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      admin: string,
      initialUpdater: string,
      initialGuardian: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    lastProposeBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    lastProposeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    lastPublishBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    lastPublishTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    merkleContentHash(overrides?: CallOverrides): Promise<BigNumber>;

    merkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingCycle(overrides?: CallOverrides): Promise<BigNumber>;

    pendingMerkleContentHash(overrides?: CallOverrides): Promise<BigNumber>;

    pendingMerkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    proposeRoot(
      root: BytesLike,
      contentHash: BytesLike,
      cycle: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    totalClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GUARDIAN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROOT_UPDATER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approveRoot(
      root: BytesLike,
      contentHash: BytesLike,
      cycle: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    claim(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      index: BigNumberish,
      cycle: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    claimed(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentCycle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    encodeClaim(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      index: BigNumberish,
      cycle: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getClaimedFor(user: string, tokens: string[], overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentMerkleData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPendingMerkleData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleMember(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleMemberCount(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    hasPendingRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      admin: string,
      initialUpdater: string,
      initialGuardian: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    lastProposeBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastProposeTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastPublishBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastPublishTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    merkleContentHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    merkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingCycle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingMerkleContentHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingMerkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeRoot(
      root: BytesLike,
      contentHash: BytesLike,
      cycle: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    totalClaimed(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;
  };
}
