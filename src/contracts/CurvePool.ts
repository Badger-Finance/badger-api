/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
<<<<<<< HEAD
import {
=======
import type {
>>>>>>> c15f0091 (chore: update update)
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
<<<<<<< HEAD
} from 'ethers';
import { FunctionFragment, Result } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface CurvePoolInterface extends utils.Interface {
  contractName: 'CurvePool';
  functions: {
    'coins(int128)': FunctionFragment;
    'balances(int128)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'coins', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balances', values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'coins', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balances', data: BytesLike): Result;
=======
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface CurvePoolInterface extends utils.Interface {
  functions: {
    "coins(int128)": FunctionFragment;
    "balances(int128)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "coins" | "balances"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "coins",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balances",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "coins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
>>>>>>> c15f0091 (chore: update update)

  events: {};
}

export interface CurvePool extends BaseContract {
<<<<<<< HEAD
  contractName: 'CurvePool';
=======
>>>>>>> c15f0091 (chore: update update)
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CurvePoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
<<<<<<< HEAD
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
=======
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
>>>>>>> c15f0091 (chore: update update)
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
<<<<<<< HEAD
    coins(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    balances(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  coins(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  balances(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    coins(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    balances(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
=======
    coins(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    balances(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  coins(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  balances(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    coins(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    balances(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
>>>>>>> c15f0091 (chore: update update)
  };

  filters: {};

  estimateGas: {
<<<<<<< HEAD
    coins(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    balances(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    coins(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balances(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
=======
    coins(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    coins(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balances(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
>>>>>>> c15f0091 (chore: update update)
  };
}
