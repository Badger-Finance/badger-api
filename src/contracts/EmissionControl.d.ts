/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface EmissionControlInterface extends ethers.utils.Interface {
  functions: {
    'MAX_BPS()': FunctionFragment;
    'addManager(address)': FunctionFragment;
    'boostedEmissionRate(address)': FunctionFragment;
    'manager(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'proRataEmissionRate(address)': FunctionFragment;
    'removeManager(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setBoostedEmission(address,uint256)': FunctionFragment;
    'setTokenWeight(address,uint256)': FunctionFragment;
    'tokenWeight(address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'MAX_BPS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addManager', values: [string]): string;
  encodeFunctionData(functionFragment: 'boostedEmissionRate', values: [string]): string;
  encodeFunctionData(functionFragment: 'manager', values: [string]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'proRataEmissionRate', values: [string]): string;
  encodeFunctionData(functionFragment: 'removeManager', values: [string]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setBoostedEmission', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setTokenWeight', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'tokenWeight', values: [string]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;

  decodeFunctionResult(functionFragment: 'MAX_BPS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'boostedEmissionRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'manager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proRataEmissionRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBoostedEmission', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTokenWeight', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenWeight', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;

  events: {
    'OwnershipTransferred(address,address)': EventFragment;
    'TokenBoostedEmissionChanged(address,uint256)': EventFragment;
    'TokenWeightChanged(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenBoostedEmissionChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenWeightChanged'): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<[string, string] & { previousOwner: string; newOwner: string }>;

export type TokenBoostedEmissionChangedEvent = TypedEvent<[string, BigNumber] & { _vault: string; _weight: BigNumber }>;

export type TokenWeightChangedEvent = TypedEvent<[string, BigNumber] & { _token: string; _weight: BigNumber }>;

export class EmissionControl extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EmissionControlInterface;

  functions: {
    MAX_BPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    addManager(
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    boostedEmissionRate(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    manager(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proRataEmissionRate(_vault: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    removeManager(
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setBoostedEmission(
      _vault: string,
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setTokenWeight(
      _token: string,
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    tokenWeight(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  MAX_BPS(overrides?: CallOverrides): Promise<BigNumber>;

  addManager(
    _manager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  boostedEmissionRate(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  manager(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  proRataEmissionRate(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

  removeManager(
    _manager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setBoostedEmission(
    _vault: string,
    _weight: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setTokenWeight(
    _token: string,
    _weight: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  tokenWeight(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    addManager(_manager: string, overrides?: CallOverrides): Promise<void>;

    boostedEmissionRate(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    manager(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    proRataEmissionRate(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeManager(_manager: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBoostedEmission(_vault: string, _weight: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setTokenWeight(_token: string, _weight: BigNumberish, overrides?: CallOverrides): Promise<void>;

    tokenWeight(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>;

    'TokenBoostedEmissionChanged(address,uint256)'(
      _vault?: string | null,
      _weight?: BigNumberish | null,
    ): TypedEventFilter<[string, BigNumber], { _vault: string; _weight: BigNumber }>;

    TokenBoostedEmissionChanged(
      _vault?: string | null,
      _weight?: BigNumberish | null,
    ): TypedEventFilter<[string, BigNumber], { _vault: string; _weight: BigNumber }>;

    'TokenWeightChanged(address,uint256)'(
      _token?: string | null,
      _weight?: BigNumberish | null,
    ): TypedEventFilter<[string, BigNumber], { _token: string; _weight: BigNumber }>;

    TokenWeightChanged(
      _token?: string | null,
      _weight?: BigNumberish | null,
    ): TypedEventFilter<[string, BigNumber], { _token: string; _weight: BigNumber }>;
  };

  estimateGas: {
    MAX_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    addManager(_manager: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    boostedEmissionRate(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    manager(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proRataEmissionRate(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeManager(_manager: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setBoostedEmission(
      _vault: string,
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setTokenWeight(
      _token: string,
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    tokenWeight(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_BPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addManager(
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    boostedEmissionRate(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manager(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proRataEmissionRate(_vault: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeManager(
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    setBoostedEmission(
      _vault: string,
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setTokenWeight(
      _token: string,
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    tokenWeight(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
