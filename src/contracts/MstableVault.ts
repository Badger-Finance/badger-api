/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
<<<<<<< HEAD
import {
=======
import type {
>>>>>>> c15f0091 (chore: update update)
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
<<<<<<< HEAD
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface MstableVaultInterface extends utils.Interface {
  contractName: 'MstableVault';
  functions: {
    'DURATION()': FunctionFragment;
    'LOCKUP()': FunctionFragment;
    'UNLOCK()': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'boostCoeff()': FunctionFragment;
    'boostDirector()': FunctionFragment;
    'claimReward()': FunctionFragment;
    'claimRewards()': FunctionFragment;
    'decimals()': FunctionFragment;
    'earned(address)': FunctionFragment;
    'exit(uint256,uint256)': FunctionFragment;
    'getBoost(address)': FunctionFragment;
    'getRewardToken()': FunctionFragment;
    'initialize(address,string,string)': FunctionFragment;
    'lastTimeRewardApplicable()': FunctionFragment;
    'lastUpdateTime()': FunctionFragment;
    'name()': FunctionFragment;
    'nexus()': FunctionFragment;
    'notifyRewardAmount(uint256)': FunctionFragment;
    'periodFinish()': FunctionFragment;
    'pokeBoost(address)': FunctionFragment;
    'priceCoeff()': FunctionFragment;
    'rawBalanceOf(address)': FunctionFragment;
    'rewardPerToken()': FunctionFragment;
    'rewardPerTokenStored()': FunctionFragment;
    'rewardRate()': FunctionFragment;
    'rewardsDistributor()': FunctionFragment;
    'rewardsToken()': FunctionFragment;
    'setRewardsDistribution(address)': FunctionFragment;
    'stake(uint256)': FunctionFragment;
    'stakingToken()': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'unclaimedRewards(address)': FunctionFragment;
    'userClaim(address)': FunctionFragment;
    'userData(address)': FunctionFragment;
    'userRewards(address,uint256)': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'DURATION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'LOCKUP', values?: undefined): string;
  encodeFunctionData(functionFragment: 'UNLOCK', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'boostCoeff', values?: undefined): string;
  encodeFunctionData(functionFragment: 'boostDirector', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claimReward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claimRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'earned', values: [string]): string;
  encodeFunctionData(functionFragment: 'exit', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getBoost', values: [string]): string;
  encodeFunctionData(functionFragment: 'getRewardToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialize', values: [string, string, string]): string;
  encodeFunctionData(functionFragment: 'lastTimeRewardApplicable', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastUpdateTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nexus', values?: undefined): string;
  encodeFunctionData(functionFragment: 'notifyRewardAmount', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'periodFinish', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pokeBoost', values: [string]): string;
  encodeFunctionData(functionFragment: 'priceCoeff', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rawBalanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'rewardPerToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardPerTokenStored', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardsDistributor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardsToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setRewardsDistribution', values: [string]): string;
  encodeFunctionData(functionFragment: 'stake', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'stakingToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'unclaimedRewards', values: [string]): string;
  encodeFunctionData(functionFragment: 'userClaim', values: [string]): string;
  encodeFunctionData(functionFragment: 'userData', values: [string]): string;
  encodeFunctionData(functionFragment: 'userRewards', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'DURATION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'LOCKUP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'UNLOCK', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'boostCoeff', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'boostDirector', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'earned', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBoost', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastTimeRewardApplicable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastUpdateTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nexus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'notifyRewardAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'periodFinish', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pokeBoost', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'priceCoeff', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rawBalanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardPerToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardPerTokenStored', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardsDistributor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardsToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRewardsDistribution', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakingToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unclaimedRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userClaim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'Poked(address)': EventFragment;
    'RewardAdded(uint256)': EventFragment;
    'RewardPaid(address,uint256)': EventFragment;
    'Staked(address,uint256,address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Withdrawn(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Poked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardPaid'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Staked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdrawn'): EventFragment;
}

export type PokedEvent = TypedEvent<[string], { user: string }>;

export type PokedEventFilter = TypedEventFilter<PokedEvent>;

export type RewardAddedEvent = TypedEvent<[BigNumber], { reward: BigNumber }>;

export type RewardAddedEventFilter = TypedEventFilter<RewardAddedEvent>;

export type RewardPaidEvent = TypedEvent<[string, BigNumber], { user: string; reward: BigNumber }>;

export type RewardPaidEventFilter = TypedEventFilter<RewardPaidEvent>;

export type StakedEvent = TypedEvent<[string, BigNumber, string], { user: string; amount: BigNumber; payer: string }>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export type TransferEvent = TypedEvent<[string, string, BigNumber], { from: string; to: string; value: BigNumber }>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type WithdrawnEvent = TypedEvent<[string, BigNumber], { user: string; amount: BigNumber }>;
=======
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface MstableVaultInterface extends utils.Interface {
  functions: {
    "DURATION()": FunctionFragment;
    "LOCKUP()": FunctionFragment;
    "UNLOCK()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "boostCoeff()": FunctionFragment;
    "boostDirector()": FunctionFragment;
    "claimReward()": FunctionFragment;
    "claimRewards()": FunctionFragment;
    "claimRewards(uint256,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "earned(address)": FunctionFragment;
    "exit(uint256,uint256)": FunctionFragment;
    "exit()": FunctionFragment;
    "getBoost(address)": FunctionFragment;
    "getRewardToken()": FunctionFragment;
    "initialize(address,string,string)": FunctionFragment;
    "lastTimeRewardApplicable()": FunctionFragment;
    "lastUpdateTime()": FunctionFragment;
    "name()": FunctionFragment;
    "nexus()": FunctionFragment;
    "notifyRewardAmount(uint256)": FunctionFragment;
    "periodFinish()": FunctionFragment;
    "pokeBoost(address)": FunctionFragment;
    "priceCoeff()": FunctionFragment;
    "rawBalanceOf(address)": FunctionFragment;
    "rewardPerToken()": FunctionFragment;
    "rewardPerTokenStored()": FunctionFragment;
    "rewardRate()": FunctionFragment;
    "rewardsDistributor()": FunctionFragment;
    "rewardsToken()": FunctionFragment;
    "setRewardsDistribution(address)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stake(address,uint256)": FunctionFragment;
    "stakingToken()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "unclaimedRewards(address)": FunctionFragment;
    "userClaim(address)": FunctionFragment;
    "userData(address)": FunctionFragment;
    "userRewards(address,uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DURATION"
      | "LOCKUP"
      | "UNLOCK"
      | "balanceOf"
      | "boostCoeff"
      | "boostDirector"
      | "claimReward"
      | "claimRewards()"
      | "claimRewards(uint256,uint256)"
      | "decimals"
      | "earned"
      | "exit(uint256,uint256)"
      | "exit()"
      | "getBoost"
      | "getRewardToken"
      | "initialize"
      | "lastTimeRewardApplicable"
      | "lastUpdateTime"
      | "name"
      | "nexus"
      | "notifyRewardAmount"
      | "periodFinish"
      | "pokeBoost"
      | "priceCoeff"
      | "rawBalanceOf"
      | "rewardPerToken"
      | "rewardPerTokenStored"
      | "rewardRate"
      | "rewardsDistributor"
      | "rewardsToken"
      | "setRewardsDistribution"
      | "stake(uint256)"
      | "stake(address,uint256)"
      | "stakingToken"
      | "symbol"
      | "totalSupply"
      | "unclaimedRewards"
      | "userClaim"
      | "userData"
      | "userRewards"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "DURATION", values?: undefined): string;
  encodeFunctionData(functionFragment: "LOCKUP", values?: undefined): string;
  encodeFunctionData(functionFragment: "UNLOCK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "boostCoeff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "boostDirector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "earned",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "exit(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "exit()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBoost",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimeRewardApplicable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nexus", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "notifyRewardAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "periodFinish",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pokeBoost",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "priceCoeff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rawBalanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerTokenStored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsDistribution",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stake(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stake(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unclaimedRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userClaim",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userData",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userRewards",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "DURATION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "LOCKUP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "UNLOCK", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boostCoeff", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "boostDirector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exit(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exit()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBoost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeRewardApplicable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nexus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "notifyRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodFinish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pokeBoost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceCoeff", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerTokenStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stake(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stake(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unclaimedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Poked(address)": EventFragment;
    "RewardAdded(uint256)": EventFragment;
    "RewardPaid(address,uint256)": EventFragment;
    "Staked(address,uint256,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Poked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface PokedEventObject {
  user: string;
}
export type PokedEvent = TypedEvent<[string], PokedEventObject>;

export type PokedEventFilter = TypedEventFilter<PokedEvent>;

export interface RewardAddedEventObject {
  reward: BigNumber;
}
export type RewardAddedEvent = TypedEvent<[BigNumber], RewardAddedEventObject>;

export type RewardAddedEventFilter = TypedEventFilter<RewardAddedEvent>;

export interface RewardPaidEventObject {
  user: string;
  reward: BigNumber;
}
export type RewardPaidEvent = TypedEvent<
  [string, BigNumber],
  RewardPaidEventObject
>;

export type RewardPaidEventFilter = TypedEventFilter<RewardPaidEvent>;

export interface StakedEventObject {
  user: string;
  amount: BigNumber;
  payer: string;
}
export type StakedEvent = TypedEvent<
  [string, BigNumber, string],
  StakedEventObject
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawnEventObject {
  user: string;
  amount: BigNumber;
}
export type WithdrawnEvent = TypedEvent<
  [string, BigNumber],
  WithdrawnEventObject
>;
>>>>>>> c15f0091 (chore: update update)

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface MstableVault extends BaseContract {
<<<<<<< HEAD
  contractName: 'MstableVault';
=======
>>>>>>> c15f0091 (chore: update update)
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MstableVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
<<<<<<< HEAD
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
=======
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
>>>>>>> c15f0091 (chore: update update)
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    LOCKUP(overrides?: CallOverrides): Promise<[BigNumber]>;

    UNLOCK(overrides?: CallOverrides): Promise<[BigNumber]>;

<<<<<<< HEAD
    balanceOf(_account: string, overrides?: CallOverrides): Promise<[BigNumber]>;
=======
    balanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
>>>>>>> c15f0091 (chore: update update)

    boostCoeff(overrides?: CallOverrides): Promise<[BigNumber]>;

    boostDirector(overrides?: CallOverrides): Promise<[string]>;

<<<<<<< HEAD
    claimReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'claimRewards()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'claimRewards(uint256,uint256)'(
      _first: BigNumberish,
      _last: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
=======
    claimReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "claimRewards()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "claimRewards(uint256,uint256)"(
      _first: PromiseOrValue<BigNumberish>,
      _last: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

<<<<<<< HEAD
    earned(_account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'exit(uint256,uint256)'(
      _first: BigNumberish,
      _last: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'exit()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    getBoost(_account: string, overrides?: CallOverrides): Promise<[BigNumber]>;
=======
    earned(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "exit(uint256,uint256)"(
      _first: PromiseOrValue<BigNumberish>,
      _last: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "exit()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBoost(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
>>>>>>> c15f0091 (chore: update update)

    getRewardToken(overrides?: CallOverrides): Promise<[string]>;

    initialize(
<<<<<<< HEAD
      _rewardsDistributor: string,
      _nameArg: string,
      _symbolArg: string,
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      _rewardsDistributor: PromiseOrValue<string>,
      _nameArg: PromiseOrValue<string>,
      _symbolArg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
    ): Promise<ContractTransaction>;

    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nexus(overrides?: CallOverrides): Promise<[string]>;

    notifyRewardAmount(
<<<<<<< HEAD
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      _reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
    ): Promise<ContractTransaction>;

    periodFinish(overrides?: CallOverrides): Promise<[BigNumber]>;

    pokeBoost(
<<<<<<< HEAD
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
    ): Promise<ContractTransaction>;

    priceCoeff(overrides?: CallOverrides): Promise<[BigNumber]>;

<<<<<<< HEAD
    rawBalanceOf(_account: string, overrides?: CallOverrides): Promise<[BigNumber]>;
=======
    rawBalanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
>>>>>>> c15f0091 (chore: update update)

    rewardPerToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardsDistributor(overrides?: CallOverrides): Promise<[string]>;

    rewardsToken(overrides?: CallOverrides): Promise<[string]>;

    setRewardsDistribution(
<<<<<<< HEAD
      _rewardsDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'stake(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'stake(address,uint256)'(
      _beneficiary: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      _rewardsDistributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "stake(uint256)"(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "stake(address,uint256)"(
      _beneficiary: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
    ): Promise<ContractTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    unclaimedRewards(
<<<<<<< HEAD
      _account: string,
      overrides?: CallOverrides,
=======
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
>>>>>>> c15f0091 (chore: update update)
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        first: BigNumber;
        last: BigNumber;
      }
    >;

<<<<<<< HEAD
    userClaim(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    userData(
      arg0: string,
      overrides?: CallOverrides,
=======
    userClaim(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userData(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
>>>>>>> c15f0091 (chore: update update)
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardPerTokenPaid: BigNumber;
        rewards: BigNumber;
        lastAction: BigNumber;
        rewardCount: BigNumber;
      }
    >;

    userRewards(
<<<<<<< HEAD
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
=======
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
>>>>>>> c15f0091 (chore: update update)
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        start: BigNumber;
        finish: BigNumber;
        rate: BigNumber;
      }
    >;

    withdraw(
<<<<<<< HEAD
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
    ): Promise<ContractTransaction>;
  };

  DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  LOCKUP(overrides?: CallOverrides): Promise<BigNumber>;

  UNLOCK(overrides?: CallOverrides): Promise<BigNumber>;

<<<<<<< HEAD
  balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;
=======
  balanceOf(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;
>>>>>>> c15f0091 (chore: update update)

  boostCoeff(overrides?: CallOverrides): Promise<BigNumber>;

  boostDirector(overrides?: CallOverrides): Promise<string>;

<<<<<<< HEAD
  claimReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'claimRewards()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'claimRewards(uint256,uint256)'(
    _first: BigNumberish,
    _last: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
=======
  claimReward(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "claimRewards()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "claimRewards(uint256,uint256)"(
    _first: PromiseOrValue<BigNumberish>,
    _last: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

<<<<<<< HEAD
  earned(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  'exit(uint256,uint256)'(
    _first: BigNumberish,
    _last: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'exit()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  getBoost(_account: string, overrides?: CallOverrides): Promise<BigNumber>;
=======
  earned(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "exit(uint256,uint256)"(
    _first: PromiseOrValue<BigNumberish>,
    _last: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "exit()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBoost(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;
>>>>>>> c15f0091 (chore: update update)

  getRewardToken(overrides?: CallOverrides): Promise<string>;

  initialize(
<<<<<<< HEAD
    _rewardsDistributor: string,
    _nameArg: string,
    _symbolArg: string,
    overrides?: Overrides & { from?: string | Promise<string> },
=======
    _rewardsDistributor: PromiseOrValue<string>,
    _nameArg: PromiseOrValue<string>,
    _symbolArg: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
  ): Promise<ContractTransaction>;

  lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;

  lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  nexus(overrides?: CallOverrides): Promise<string>;

  notifyRewardAmount(
<<<<<<< HEAD
    _reward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
=======
    _reward: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
  ): Promise<ContractTransaction>;

  periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

  pokeBoost(
<<<<<<< HEAD
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
=======
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
  ): Promise<ContractTransaction>;

  priceCoeff(overrides?: CallOverrides): Promise<BigNumber>;

<<<<<<< HEAD
  rawBalanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;
=======
  rawBalanceOf(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;
>>>>>>> c15f0091 (chore: update update)

  rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

  rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

  rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

  rewardsDistributor(overrides?: CallOverrides): Promise<string>;

  rewardsToken(overrides?: CallOverrides): Promise<string>;

  setRewardsDistribution(
<<<<<<< HEAD
    _rewardsDistributor: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'stake(uint256)'(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'stake(address,uint256)'(
    _beneficiary: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
=======
    _rewardsDistributor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "stake(uint256)"(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "stake(address,uint256)"(
    _beneficiary: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
  ): Promise<ContractTransaction>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  unclaimedRewards(
<<<<<<< HEAD
    _account: string,
    overrides?: CallOverrides,
=======
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
>>>>>>> c15f0091 (chore: update update)
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      first: BigNumber;
      last: BigNumber;
    }
  >;

<<<<<<< HEAD
  userClaim(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  userData(
    arg0: string,
    overrides?: CallOverrides,
=======
  userClaim(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userData(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
>>>>>>> c15f0091 (chore: update update)
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      rewardPerTokenPaid: BigNumber;
      rewards: BigNumber;
      lastAction: BigNumber;
      rewardCount: BigNumber;
    }
  >;

  userRewards(
<<<<<<< HEAD
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides,
=======
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
>>>>>>> c15f0091 (chore: update update)
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      start: BigNumber;
      finish: BigNumber;
      rate: BigNumber;
    }
  >;

  withdraw(
<<<<<<< HEAD
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
=======
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
  ): Promise<ContractTransaction>;

  callStatic: {
    DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    LOCKUP(overrides?: CallOverrides): Promise<BigNumber>;

    UNLOCK(overrides?: CallOverrides): Promise<BigNumber>;

<<<<<<< HEAD
    balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;
=======
    balanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
>>>>>>> c15f0091 (chore: update update)

    boostCoeff(overrides?: CallOverrides): Promise<BigNumber>;

    boostDirector(overrides?: CallOverrides): Promise<string>;

    claimReward(overrides?: CallOverrides): Promise<void>;

<<<<<<< HEAD
    'claimRewards()'(overrides?: CallOverrides): Promise<void>;

    'claimRewards(uint256,uint256)'(
      _first: BigNumberish,
      _last: BigNumberish,
      overrides?: CallOverrides,
=======
    "claimRewards()"(overrides?: CallOverrides): Promise<void>;

    "claimRewards(uint256,uint256)"(
      _first: PromiseOrValue<BigNumberish>,
      _last: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
>>>>>>> c15f0091 (chore: update update)
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

<<<<<<< HEAD
    earned(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    'exit(uint256,uint256)'(_first: BigNumberish, _last: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'exit()'(overrides?: CallOverrides): Promise<void>;

    getBoost(_account: string, overrides?: CallOverrides): Promise<BigNumber>;
=======
    earned(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exit(uint256,uint256)"(
      _first: PromiseOrValue<BigNumberish>,
      _last: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "exit()"(overrides?: CallOverrides): Promise<void>;

    getBoost(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
>>>>>>> c15f0091 (chore: update update)

    getRewardToken(overrides?: CallOverrides): Promise<string>;

    initialize(
<<<<<<< HEAD
      _rewardsDistributor: string,
      _nameArg: string,
      _symbolArg: string,
      overrides?: CallOverrides,
=======
      _rewardsDistributor: PromiseOrValue<string>,
      _nameArg: PromiseOrValue<string>,
      _symbolArg: PromiseOrValue<string>,
      overrides?: CallOverrides
>>>>>>> c15f0091 (chore: update update)
    ): Promise<void>;

    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nexus(overrides?: CallOverrides): Promise<string>;

<<<<<<< HEAD
    notifyRewardAmount(_reward: BigNumberish, overrides?: CallOverrides): Promise<void>;

    periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    pokeBoost(_account: string, overrides?: CallOverrides): Promise<void>;

    priceCoeff(overrides?: CallOverrides): Promise<BigNumber>;

    rawBalanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;
=======
    notifyRewardAmount(
      _reward: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    pokeBoost(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    priceCoeff(overrides?: CallOverrides): Promise<BigNumber>;

    rawBalanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
>>>>>>> c15f0091 (chore: update update)

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsDistributor(overrides?: CallOverrides): Promise<string>;

    rewardsToken(overrides?: CallOverrides): Promise<string>;

<<<<<<< HEAD
    setRewardsDistribution(_rewardsDistributor: string, overrides?: CallOverrides): Promise<void>;

    'stake(uint256)'(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'stake(address,uint256)'(_beneficiary: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
=======
    setRewardsDistribution(
      _rewardsDistributor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "stake(uint256)"(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "stake(address,uint256)"(
      _beneficiary: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
>>>>>>> c15f0091 (chore: update update)

    stakingToken(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    unclaimedRewards(
<<<<<<< HEAD
      _account: string,
      overrides?: CallOverrides,
=======
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
>>>>>>> c15f0091 (chore: update update)
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        first: BigNumber;
        last: BigNumber;
      }
    >;

<<<<<<< HEAD
    userClaim(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userData(
      arg0: string,
      overrides?: CallOverrides,
=======
    userClaim(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userData(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
>>>>>>> c15f0091 (chore: update update)
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardPerTokenPaid: BigNumber;
        rewards: BigNumber;
        lastAction: BigNumber;
        rewardCount: BigNumber;
      }
    >;

    userRewards(
<<<<<<< HEAD
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
=======
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
>>>>>>> c15f0091 (chore: update update)
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        start: BigNumber;
        finish: BigNumber;
        rate: BigNumber;
      }
    >;

<<<<<<< HEAD
    withdraw(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Poked(address)'(user?: string | null): PokedEventFilter;
    Poked(user?: string | null): PokedEventFilter;

    'RewardAdded(uint256)'(reward?: null): RewardAddedEventFilter;
    RewardAdded(reward?: null): RewardAddedEventFilter;

    'RewardPaid(address,uint256)'(user?: string | null, reward?: null): RewardPaidEventFilter;
    RewardPaid(user?: string | null, reward?: null): RewardPaidEventFilter;

    'Staked(address,uint256,address)'(user?: string | null, amount?: null, payer?: null): StakedEventFilter;
    Staked(user?: string | null, amount?: null, payer?: null): StakedEventFilter;

    'Transfer(address,address,uint256)'(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
    Transfer(from?: string | null, to?: string | null, value?: null): TransferEventFilter;

    'Withdrawn(address,uint256)'(user?: string | null, amount?: null): WithdrawnEventFilter;
    Withdrawn(user?: string | null, amount?: null): WithdrawnEventFilter;
=======
    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Poked(address)"(user?: PromiseOrValue<string> | null): PokedEventFilter;
    Poked(user?: PromiseOrValue<string> | null): PokedEventFilter;

    "RewardAdded(uint256)"(reward?: null): RewardAddedEventFilter;
    RewardAdded(reward?: null): RewardAddedEventFilter;

    "RewardPaid(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      reward?: null
    ): RewardPaidEventFilter;
    RewardPaid(
      user?: PromiseOrValue<string> | null,
      reward?: null
    ): RewardPaidEventFilter;

    "Staked(address,uint256,address)"(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      payer?: null
    ): StakedEventFilter;
    Staked(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      payer?: null
    ): StakedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;

    "Withdrawn(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawnEventFilter;
>>>>>>> c15f0091 (chore: update update)
  };

  estimateGas: {
    DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    LOCKUP(overrides?: CallOverrides): Promise<BigNumber>;

    UNLOCK(overrides?: CallOverrides): Promise<BigNumber>;

<<<<<<< HEAD
    balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;
=======
    balanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
>>>>>>> c15f0091 (chore: update update)

    boostCoeff(overrides?: CallOverrides): Promise<BigNumber>;

    boostDirector(overrides?: CallOverrides): Promise<BigNumber>;

<<<<<<< HEAD
    claimReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'claimRewards()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'claimRewards(uint256,uint256)'(
      _first: BigNumberish,
      _last: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
=======
    claimReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "claimRewards()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "claimRewards(uint256,uint256)"(
      _first: PromiseOrValue<BigNumberish>,
      _last: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

<<<<<<< HEAD
    earned(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    'exit(uint256,uint256)'(
      _first: BigNumberish,
      _last: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'exit()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    getBoost(_account: string, overrides?: CallOverrides): Promise<BigNumber>;
=======
    earned(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exit(uint256,uint256)"(
      _first: PromiseOrValue<BigNumberish>,
      _last: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "exit()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBoost(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
>>>>>>> c15f0091 (chore: update update)

    getRewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
<<<<<<< HEAD
      _rewardsDistributor: string,
      _nameArg: string,
      _symbolArg: string,
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      _rewardsDistributor: PromiseOrValue<string>,
      _nameArg: PromiseOrValue<string>,
      _symbolArg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
    ): Promise<BigNumber>;

    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nexus(overrides?: CallOverrides): Promise<BigNumber>;

    notifyRewardAmount(
<<<<<<< HEAD
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      _reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
    ): Promise<BigNumber>;

    periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

<<<<<<< HEAD
    pokeBoost(_account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    priceCoeff(overrides?: CallOverrides): Promise<BigNumber>;

    rawBalanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;
=======
    pokeBoost(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    priceCoeff(overrides?: CallOverrides): Promise<BigNumber>;

    rawBalanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
>>>>>>> c15f0091 (chore: update update)

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsToken(overrides?: CallOverrides): Promise<BigNumber>;

    setRewardsDistribution(
<<<<<<< HEAD
      _rewardsDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'stake(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'stake(address,uint256)'(
      _beneficiary: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      _rewardsDistributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "stake(uint256)"(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "stake(address,uint256)"(
      _beneficiary: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
    ): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

<<<<<<< HEAD
    unclaimedRewards(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    userClaim(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userData(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userRewards(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(_amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
=======
    unclaimedRewards(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userClaim(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userData(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userRewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
>>>>>>> c15f0091 (chore: update update)
  };

  populateTransaction: {
    DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LOCKUP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNLOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

<<<<<<< HEAD
    balanceOf(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
=======
    balanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
>>>>>>> c15f0091 (chore: update update)

    boostCoeff(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    boostDirector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

<<<<<<< HEAD
    claimReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'claimRewards()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'claimRewards(uint256,uint256)'(
      _first: BigNumberish,
      _last: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
=======
    claimReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "claimRewards()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "claimRewards(uint256,uint256)"(
      _first: PromiseOrValue<BigNumberish>,
      _last: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

<<<<<<< HEAD
    earned(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'exit(uint256,uint256)'(
      _first: BigNumberish,
      _last: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'exit()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    getBoost(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
=======
    earned(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "exit(uint256,uint256)"(
      _first: PromiseOrValue<BigNumberish>,
      _last: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "exit()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBoost(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
>>>>>>> c15f0091 (chore: update update)

    getRewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
<<<<<<< HEAD
      _rewardsDistributor: string,
      _nameArg: string,
      _symbolArg: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<PopulatedTransaction>;
=======
      _rewardsDistributor: PromiseOrValue<string>,
      _nameArg: PromiseOrValue<string>,
      _symbolArg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lastTimeRewardApplicable(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
>>>>>>> c15f0091 (chore: update update)

    lastUpdateTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nexus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    notifyRewardAmount(
<<<<<<< HEAD
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      _reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
    ): Promise<PopulatedTransaction>;

    periodFinish(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pokeBoost(
<<<<<<< HEAD
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
    ): Promise<PopulatedTransaction>;

    priceCoeff(overrides?: CallOverrides): Promise<PopulatedTransaction>;

<<<<<<< HEAD
    rawBalanceOf(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;
=======
    rawBalanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPerTokenStored(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsDistributor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
>>>>>>> c15f0091 (chore: update update)

    rewardsToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRewardsDistribution(
<<<<<<< HEAD
      _rewardsDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'stake(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'stake(address,uint256)'(
      _beneficiary: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
=======
      _rewardsDistributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "stake(uint256)"(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "stake(address,uint256)"(
      _beneficiary: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
    ): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

<<<<<<< HEAD
    unclaimedRewards(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userClaim(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userData(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userRewards(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
=======
    unclaimedRewards(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userClaim(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userData(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userRewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
>>>>>>> c15f0091 (chore: update update)
    ): Promise<PopulatedTransaction>;
  };
}
