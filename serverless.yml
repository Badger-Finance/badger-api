---
service: badger-v2
frameworkVersion: '2'
# temporarily silence complaints about v1 swagger documentation
configValidationMode: off

plugins:
  - serverless-aws-documentation
  - serverless-api-gateway-caching
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline

custom:
  stage: ${opt:stage, self:provider.stage}
  dynamodb:
    stages:
      - ${self:custom.stage}
    inMemory: true
    migration: true
  apiGatewayCaching:
    enabled: ${self:custom.caching.${self:custom.stage}}
    ttlInSeconds: 300
  serverless-offline:
    noPrependStageInUrl: true
  documentation:
    api:
      info:
        version: "1.0"
        title: "Badger API"
        description: "Badger Finance Serverless API"
        tags:
          - name: "Protocol"
            description: "Protocol related API"
          - name: "Chart"
            description: "Chart related API"
  table:
    ASSET_DATA:
      staging: "badger-staging-asset"
      prod: "badger-asset"
    PRICE_DATA:
      staging: "badger-staging-prices"
      prod: "badger-prices"
    SETT_SNAPSHOTS_DATA:
      staging: "badger-staging-sett-snapshots"
      prod: "badger-sett-snapshots"
  merkleProofs:
    staging: "badger-staging-merkle-proofs"
    prod: "badger-merkle-proofs"
  caching:
    staging: false
    prod: true

provider:
  name: aws
  runtime: nodejs12.x
  stage: staging
  region: us-west-1
  iam:
    role:
      managedPolicies:
        - arn:aws:iam::aws:policy/AWSLambdaFullAccess
  versionFunctions: false
  apiGateway:
    shouldStartNameWithService: true
    minimumCompressionSize: 1024
  environment:
    BADGER: "https://api.thegraph.com/subgraphs/name/axejintao/badger-dao"
    BADGER_BSC: "https://api.thegraph.com/subgraphs/name/axejintao/badger-dao-bsc"
    BADGER_DAO: "https://api.thegraph.com/subgraphs/name/darruma/badger"
    UNISWAP: "https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2"
    SUSHISWAP: "https://api.thegraph.com/subgraphs/name/jiro-ono/sushiswap-v1-exchange-staging"
    PANCAKESWAP: "https://api.thegraph.com/subgraphs/name/pancakeswap/exchange"
    MASTERCHEF: "https://api.thegraph.com/subgraphs/name/sushiswap/master-chef"
    ASSET_DATA: ${self:custom.table.ASSET_DATA.${self:custom.stage}}
    PRICE_DATA: ${self:custom.table.PRICE_DATA.${self:custom.stage}}
    SETT_SNAPSHOTS_DATA: ${self:custom.table.SETT_SNAPSHOTS_DATA.${self:custom.stage}}
    MERKLE_CLAIM_BUCKET: ${self:custom.merkleProofs.${self:custom.stage}}

resources:
  Resources:
    protocolTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.table.ASSET_DATA.${self:custom.stage}}
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: "asset"
            KeyType: "HASH"
          - AttributeName: "height"
            KeyType: "RANGE"
        AttributeDefinitions:
          - AttributeName: "asset"
            AttributeType: "S"
          - AttributeName: "height"
            AttributeType: "N"
    priceTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.table.PRICE_DATA.${self:custom.stage}}
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: "address"
            KeyType: "HASH"
          - AttributeName: "updatedAt"
            KeyType: "RANGE"
        AttributeDefinitions:
          - AttributeName: "address"
            AttributeType: "S"
          - AttributeName: "updatedAt"
            AttributeType: "N"
    settsSnapshotsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.table.SETT_SNAPSHOTS_DATA.${self:custom.stage}}
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: "address"
            KeyType: "HASH"
          - AttributeName: "updatedAt"
            KeyType: "RANGE"
        AttributeDefinitions:
          - AttributeName: "address"
            AttributeType: "S"
          - AttributeName: "updatedAt"
            AttributeType: "N"

functions:
  request-handler:
    handler: src/LambdaServer.handler
    timeout: 30
    events:
      - http:
          path: /v2/{proxy+}
          method: any
          cors: true
      - http:
          path: /v2/
          method: any
          cors: true

  get-protocol-ppfs:
    handler: src/v1/protocol/ppfs/handler.handler
    timeout: 30
    events:
      - http:
          path: /protocol/ppfs
          method: get
          cors: true
          caching:
            enabled: ${self:custom.caching.${self:custom.stage}}
          documentation:
            summary: "Retrieve ppfs for all setts"
            description: "PPFS values are pulled from indexed chain data"
            queryParams:
              - name: "tokens"
                description: "Optionally include token balances"
                required: false
            tags:
              - "Protocol"
            methodResponses:
              - statusCode: "200"
              - statusCode: "500"
  
  get-protocol-value:
    handler: src/v1/protocol/handler.handler
    timeout: 30
    events:
      - http:
          path: /protocol/value
          method: get
          cors: true
          caching:
            enabled: ${self:custom.caching.${self:custom.stage}}
          request:
            parameters:
              querystrings:
                tokens: false
          documentation:
            summary: "Retrieve value locked in all setts and protocol"
            description: "Sett values are pulled from indexed chain data with the total value included as the sum of all setts"
            queryParams:
              - name: "tokens"
                description: "Optionally include token balances"
                required: false
            tags:
              - "Protocol"
            methodResponses:
              - statusCode: "200"
              - statusCode: "500"

  get-protocol-earnings:
    handler: src/v1/protocol/earnings/handler.handler
    timeout: 30
    events:
      - http:
          path: /protocol/earnings/{userId}
          method: get
          cors: true
          caching:
            enabled: ${self:custom.caching.${self:custom.stage}}
            ttlInSeconds: 3600
            cacheKeyParameters:
              - name: request.path.userId
          documentation:
            summary: "Get earnings for a given ethereum address"
            description: "Get the token based earnings for all setts and their current USD valuation"
            pathParams:
              - name: "userId"
                description: "Ethereum address"
                required: true
            tags:
              - "Protocol"
            methodResponses:
              - statusCode: "200"
              - statusCode: "500"

  get-protocol-farm:
    handler: src/v1/protocol/farm/handler.handler
    timeout: 30
    events:
      - http:
          path: /protocol/farm
          method: get
          cors: true
          caching:
            enabled: ${self:custom.caching.${self:custom.stage}}
          documentation:
            summary: "Get active Geyser farms"
            description: "Get the current active Geyser emission allocation"
            tags:
              - "Protocol"
            methodResponses:
              - statusCode: "200"
              - statusCode: "500"

  get-protocol-sett-performance:
    handler: src/v1/protocol/performance/handler.handler
    timeout: 30
    events:
      - http:
          path: /protocol/sett/{settName}/performance
          method: get
          cors: true
          caching:
            enabled: ${self:custom.caching.${self:custom.stage}}
            cacheKeyParameters:
              - name: request.path.settName
          documentation:
            summary: "Estimated ROI per sett"
            description: "Return multiple ROI values for sampled periods"
            pathParams:
              - name: "settName"
                description: "Sett name"
                required: true
            tags:
              - "Protocol"
            methodResponses:
              - statusCode: "200"
              - statusCode: "500"

  get-chart-sett-performance:
    handler: src/v1/chart/sett/performance/handler.handler
    timeout: 30
    events:
      - http:
          path: /chart/sett/{settName}/performance
          method: get
          cors: true
          caching:
            enabled: ${self:custom.caching.${self:custom.stage}}
            cacheKeyParameters:
              - name: request.path.settName
          request:
            parameters:
              querystrings:
                count: false
          documentation:
            summary: "Chart data for historic sett performance"
            description: "Return an array of data point objects with coordinate values corresponding to sett ratio"
            pathParams:
              - name: "settName"
                description: "Sett name"
                required: true
            queryParams:
              - name: "count"
                description: "Number of data points to limit response"
                required: false
            tags:
              - "Chart"
            methodResponses:
              - statusCode: "200"
              - statusCode: "500"

  get-chart-sett:
    handler: src/v1/chart/sett/handler.handler
    timeout: 30
    events:
      - http:
          path: /chart/sett/{settName}
          method: get
          cors: true
          caching:
            enabled: ${self:custom.caching.${self:custom.stage}}
            cacheKeyParameters:
              - name: request.path.settName
          request:
            parameters:
              querystrings:
                count: false
          documentation:
            summary: "Chart data for historic sett assets under management"
            description: "Return an array of data point objects with coordinate values corresponding to sett asset USD valuation"
            pathParams:
              - name: "settName"
                description: "Sett name"
                required: true
            queryParams:
              - name: "count"
                description: "Number of data points to limit response"
                required: false
            tags:
              - "Chart"
            methodResponses:
              - statusCode: "200"
              - statusCode: "500"

  index-sett:
    handler: src/indexer/sett-indexer.indexAsset
    timeout: 300
    events:
      - schedule:
          name: ${self:service}-${self:custom.stage}-index-sbtccrv
          description: "index historical data for sbtc sett"
          rate: rate(5 minutes)
          input:
            contract: "0xd04c48a53c111300ad41190d63681ed3dad998ec"
            createdBlock: 11380877
            asset: "sbtccrv"
      - schedule:
          name: ${self:service}-${self:custom.stage}-index-renbtccrv
          description: "index historical data for renbtccrv sett"
          rate: rate(5 minutes)
          input:
            contract: "0x6def55d2e18486b9ddfaa075bc4e4ee0b28c1545"
            createdBlock: 11380872
            asset: "renbtccrv"
      - schedule:
          name: ${self:service}-${self:custom.stage}-index-tbtccrv
          description: "index historical data for tbtccrv sett"
          rate: rate(5 minutes)
          input:
            contract: "0xb9d076fde463dbc9f915e5392f807315bf940334"
            createdBlock: 11380878
            asset: "tbtccrv"
      - schedule:
          name: ${self:service}-${self:custom.stage}-index-hrenbtccrv
          description: "index historical data for hrenbtccrv sett"
          rate: rate(5 minutes)
          input:
            contract: "0xaf5a1decfa95baf63e0084a35c62592b774a2a87"
            createdBlock: 11380939
            asset: "hrenbtccrv"
      - schedule:
          name: ${self:service}-${self:custom.stage}-index-badger
          description: "index historical data for badger sett"
          rate: rate(5 minutes)
          input:
            contract: "0x19d97d8fa813ee2f51ad4b4e04ea08baf4dffc28"
            createdBlock: 11380871
            asset: "badger"
      - schedule:
          name: ${self:service}-${self:custom.stage}-index-digg
          description: "index historical data for digg sett"
          rate: rate(5 minutes)
          input:
            contract: "0x7e7e112a68d8d2e221e11047a72ffc1065c38e1a"
            createdBlock: 11680422
            asset: "digg"
      - schedule:
          name: ${self:service}-${self:custom.stage}-index-uniswap-badger-wbtc
          description: "index historical data for badger uniswap badger-wbtc sett"
          rate: rate(5 minutes)
          input:
            contract: "0x235c9e24d3fb2fafd58a2e49d454fdcd2dbf7ff1"
            createdBlock: 11380883
            asset: "badger-wbtc"
      - schedule:
          name: ${self:service}-${self:custom.stage}-index-uniswap-digg-wbtc
          description: "index historical data for badger uniswap digg-wbtc sett"
          rate: rate(5 minutes)
          input:
            contract: "0xc17078fdd324cc473f8175dc5290fae5f2e84714"
            createdBlock: 11680833
            asset: "digg-wbtc"
      - schedule:
          name: ${self:service}-${self:custom.stage}-index-sushiswap-badger-wbtc
          description: "index historical data for badger sushiswap badger-wbtc vault"
          rate: rate(5 minutes)
          input:
            contract: "0x1862a18181346ebd9edaf800804f89190def24a5"
            createdBlock: 11537600
            asset: "slp-badger-wbtc"
      - schedule:
          name: ${self:service}-${self:custom.stage}-index-sushiswap-wbtc-eth
          description: "index historical data for badger sushiswap wbtc-eth vault"
          rate: rate(5 minutes)
          input:
            contract: "0x758a43ee2bff8230eeb784879cdcff4828f2544d"
            createdBlock: 11539529
            asset: "slp-wbtc-eth"
      - schedule:
          name: ${self:service}-${self:custom.stage}-index-sushiswap-digg-wbtc
          description: "index historical data for badger sushiswap digg-wbtc vault"
          rate: rate(5 minutes)
          input:
            contract: "0x88128580acdd9c04ce47afce196875747bf2a9f6"
            createdBlock: 11681030
            asset: "slp-digg-wbtc"
      # - schedule:
      #     name: ${self:service}-${self:custom.stage}-index-pancakeswap-bdigg-btcb
      #     description: "index historical data for badger pancakeswap bdigg-btcb vault"
      #     rate: rate(5 minutes)
      #     input:
      #       contract: "0xaf4B9C4b545D5324904bAa15e29796D2E2f90813"
      #       createdBlock: 5712807
      #       asset: "plp-bdigg-btcb"
      #       chain: "bsc"
      # - schedule:
      #     name: ${self:service}-${self:custom.stage}-index-pancakeswap-bbadger-btcb
      #     description: "index historical data for badger pancakeswap bbadger-btcb vault"
      #     rate: rate(5 minutes)
      #     input:
      #       contract: "0x857F91f735f4B03b19D2b5c6E476C73DB8241F55"
      #       createdBlock: 5712803
      #       asset: "plp-bbadger-btcb"
      #       chain: "bsc"
      # - schedule:
      #     name: ${self:service}-${self:custom.stage}-index-pancakeswap-bnb-btcb
      #     description: "index historical data for badger pancakeswap bnb-btcb vault"
      #     rate: rate(5 minutes)
      #     input:
      #       contract: "0xaf4B9C4b545D5324904bAa15e29796D2E2f90813"
      #       createdBlock: 5516404
      #       asset: "plp-bnb-btcb"
      #       chain: "bsc"

  index-prices:
    handler: src/indexer/price-indexer.indexPrices
    timeout: 30
    events:
      - schedule:
          name: ${self:service}-${self:custom.stage}-index-prices
          description: "index price data for all protocol tokens"
          rate: rate(5 minutes)

  index-sett-snapshots:
    handler: src/indexer/sett-snapshots.indexer
    timeout: 30
    events:
      - schedule:
          name: ${self:service}-${self:custom.stage}-index-sett-snapshots
          description: "index data for supported setts"
          rate: rate(5 minutes)
