---
service: badger-v2
frameworkVersion: '2'

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline

custom:
  stage: ${opt:stage, self:provider.stage}

  # todo: enable a local stage
  dynamodb:
    stages:
      - staging
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
    seed:
      default:
        sources:
          - table: ${self:custom.table.PRICE_DATA.${self:custom.stage}}
            sources: [./seed/prices.json]
          - table: ${self:custom.table.APY_SNAPSHOTS_DATA.${self:custom.stage}}
            sources: [./seed/value-sources.json]
          - table: ${self:custom.table.SETT_SNAPSHOTS_DATA.${self:custom.stage}}
            sources: [./seed/cached-sett-snapshots.json]

  serverless-offline:
    noPrependStageInUrl: true

  # todo: rename tables using stage variable
  table:
    APY_SNAPSHOTS_DATA:
      staging: "badger-staging-apy-snapshots"
      prod: "badger-apy-snapshots"
    ASSET_DATA:
      staging: "badger-staging-asset"
      prod: "badger-asset"
    PRICE_DATA:
      staging: "badger-staging-prices"
      prod: "badger-prices"
    SETT_SNAPSHOTS_DATA:
      staging: "badger-staging-sett-snapshots"
      prod: "badger-sett-snapshots"

  merkleProofs:
    staging: "badger-staging-merkle-proofs"
    prod: "badger-merkle-proofs"

provider:
  name: aws
  runtime: nodejs12.x
  stage: staging
  region: us-west-1
  iam:
    role:
      managedPolicies:
        - arn:aws:iam::aws:policy/AWSLambdaFullAccess
  versionFunctions: false
  apiGateway:
    shouldStartNameWithService: true
    minimumCompressionSize: 1024
  environment:
    BADGER: "https://api.thegraph.com/subgraphs/name/axejintao/badger-dao"
    BADGER_BSC: "https://api.thegraph.com/subgraphs/name/axejintao/badger-dao-bsc"
    BADGER_DAO: "https://api.thegraph.com/subgraphs/name/darruma/badger"
    UNISWAP: "https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2"
    SUSHISWAP: "https://api.thegraph.com/subgraphs/name/jiro-ono/sushiswap-v1-exchange-staging"
    PANCAKESWAP: "https://api.thegraph.com/subgraphs/name/pancakeswap/exchange"
    MASTERCHEF: "https://api.thegraph.com/subgraphs/name/sushiswap/master-chef"
    APY_SNAPSHOTS_DATA: ${self:custom.table.APY_SNAPSHOTS_DATA.${self:custom.stage}}
    ASSET_DATA: ${self:custom.table.ASSET_DATA.${self:custom.stage}}
    PRICE_DATA: ${self:custom.table.PRICE_DATA.${self:custom.stage}}
    SETT_SNAPSHOTS_DATA: ${self:custom.table.SETT_SNAPSHOTS_DATA.${self:custom.stage}}
    REWARD_DATA: ${self:custom.merkleProofs.${self:custom.stage}}
    LEADERBOARD_DATA: ${self:custom.stage}-leaderboard
    BOUNCER_PROOFS: badger-bouncer.json

resources:
  Resources:
    apySnapshotsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.table.APY_SNAPSHOTS_DATA.${self:custom.stage}}
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: "addressValueSourceType"
            KeyType: "HASH"
        AttributeDefinitions:
          - AttributeName: "addressValueSourceType"
            AttributeType: "S" 
          - AttributeName: "address"
            AttributeType: "S"
        GlobalSecondaryIndexes:
          - IndexName: IndexApySnapshotsOnAddress
            KeySchema:
              - AttributeName: address
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    protocolTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.table.ASSET_DATA.${self:custom.stage}}
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: "asset"
            KeyType: "HASH"
          - AttributeName: "height"
            KeyType: "RANGE"
        AttributeDefinitions:
          - AttributeName: "asset"
            AttributeType: "S"
          - AttributeName: "height"
            AttributeType: "N"

    priceTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.table.PRICE_DATA.${self:custom.stage}}
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: "address"
            KeyType: "HASH"
          - AttributeName: "updatedAt"
            KeyType: "RANGE"
        AttributeDefinitions:
          - AttributeName: "address"
            AttributeType: "S"
          - AttributeName: "updatedAt"
            AttributeType: "N"

    settsSnapshotsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.table.SETT_SNAPSHOTS_DATA.${self:custom.stage}}
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: "address"
            KeyType: "HASH"
        AttributeDefinitions:
          - AttributeName: "address"
            AttributeType: "S"

    leaderboardTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.stage}-leaderboard
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: "leaderboard"
            KeyType: "HASH"
          - AttributeName: "rank"
            KeyType: "RANGE"
        AttributeDefinitions:
          - AttributeName: "leaderboard"
            AttributeType: "S"
          - AttributeName: "rank"
            AttributeType: "N"
          - AttributeName: "address"
            AttributeType: "S"
        GlobalSecondaryIndexes:
          - IndexName: IndexLeaderBoardRankOnAddress
            KeySchema:
              - AttributeName: "address"
                KeyType: HASH
            Projection:
              ProjectionType: ALL

functions:
  request-handler:
    handler: src/LambdaServer.handler
    timeout: 30
    events:
      - http:
          path: /v2/{proxy+}
          method: any
          cors: true
      - http:
          path: /v2/
          method: any
          cors: true

  index-setts:
    handler: src/indexer/sett-indexer.indexAsset
    timeout: 300
    events:
      - schedule:
          name: ${self:service}-${self:custom.stage}-index-setts
          description: "index historical data for all setts"
          rate: rate(4 hours)

  index-apy-snapshots:
    handler: src/indexer/apy-snapshots-indexer.refreshApySnapshots
    timeout: 30
    events:
      - schedule:
          name: ${self:service}-${self:custom.stage}-index-apy-snapshots
          description: "index data for sett apy"
          rate: rate(1 minute)

  index-prices:
    handler: src/indexer/price-indexer.indexPrices
    timeout: 30
    events:
      - schedule:
          name: ${self:service}-${self:custom.stage}-index-prices
          description: "index price data for all protocol tokens"
          rate: rate(1 minute)

  index-sett-snapshots:
    handler: src/indexer/sett-snapshots-indexer.refreshSettSnapshots
    timeout: 30
    events:
      - schedule:
          name: ${self:service}-${self:custom.stage}-index-sett-snapshots
          description: "index data for supported setts"
          rate: rate(1 minute)

  index-leaderboard:
    handler: src/indexer/boost-indexer.indexBoostLeaderBoard
    timeout: 60
    events:
      - schedule:
          name: ${self:service}-${self:custom.stage}-index-leaderboard
          description: "index leaderboard data from latest badger boosts"
          rate: rate(1 minute)
