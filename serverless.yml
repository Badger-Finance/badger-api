---
service: badger-v2
frameworkVersion: '2'
useDotenv: true

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline

custom:
  stage: ${opt:stage, self:provider.stage}

  dynamodb:
    stages:
      - staging
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
    seed:
      default:
        sources:
          - table: ${self:custom.table.PRICE_DATA.${self:custom.stage}}
            sources: [./seed/prices.json]
          - table: ${self:custom.table.APY_SNAPSHOTS_DATA.${self:custom.stage}}
            sources: [./seed/value-sources.json]
          - table: ${self:custom.table.SETT_SNAPSHOTS_DATA.${self:custom.stage}}
            sources: [./seed/cached-sett-snapshots.json]

  serverless-offline:
    noPrependStageInUrl: true

  table:
    APY_SNAPSHOTS_DATA:
      staging: 'apy-snapshots-staging'
      prod: 'apy-snapshots'
    SETT_DATA:
      staging: 'sett-historic-snapshots-staging'
      prod: 'sett-historic-snapshots'
    LIQUIDITY_POOL_TOKEN_BALANCES_DATA:
      staging: 'liquidity-pool-token-balances-staging'
      prod: 'liquidity-pool-token-balances'
    PRICE_DATA:
      staging: 'token-prices-staging'
      prod: 'token-prices'
    SETT_SNAPSHOTS_DATA:
      staging: 'sett-snapshots-staging'
      prod: 'sett-snapshots'
    ACCOUNT_DATA:
      staging: 'accounts-staging'
      prod: 'accounts'

  merkleProofs:
    staging: 'badger-staging-merkle-proofs'
    prod: 'badger-merkle-proofs'

provider:
  name: aws
  runtime: nodejs12.x
  stage: staging
  region: us-west-1
  iam:
    role:
      managedPolicies:
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
  versionFunctions: false
  apiGateway:
    shouldStartNameWithService: true
    minimumCompressionSize: 1024
  # TODO: transition to dot env serverless support
  environment:
    # rpc definitions
    ETH_RPC: ${env:ETH_RPC}
    BSC_RPC: ${env:BSC_RPC}
    MATIC_RPC: ${env:MATIC_RPC}
    # Subgraph Definitions
    # BADGER: 'https://gateway.thegraph.com/api/${env:GRAPH_API_KEY}/subgraphs/id/0x8d26c9dac7e16738752fa1446b956a97c63e2f39-0'
    BADGER: 'https://api.thegraph.com/subgraphs/name/axejintao/badger-dao'
    BADGER_BSC: 'https://api.thegraph.com/subgraphs/name/axejintao/badger-dao-bsc'
    BADGER_DAO: 'https://api.thegraph.com/subgraphs/name/darruma/badger'
    BADGER_MATIC: 'https://api.thegraph.com/subgraphs/name/axejintao/badger-dao-polygon'
    BADGER_XDAI: 'https://api.thegraph.com/subgraphs/name/axejintao/badger-dao-xdai'
    UNISWAP: 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2'
    SUSHISWAP: 'https://api.thegraph.com/subgraphs/name/sushiswap/exchange'
    SUSHISWAP_XDAI: 'https://api.thegraph.com/subgraphs/name/sushiswap/xdai-exchange'
    SUSHISWAP_MATIC: 'https://api.thegraph.com/subgraphs/name/sushiswap/matic-exchange'
    PANCAKESWAP: 'https://api.thegraph.com/subgraphs/name/pancakeswap/exchange'
    QUICKSWAP: 'https://api.thegraph.com/subgraphs/name/sameepsi/quickswap06'
    # Table Defintions
    APY_SNAPSHOTS_DATA: ${self:custom.table.APY_SNAPSHOTS_DATA.${self:custom.stage}}
    SETT_DATA: ${self:custom.table.SETT_DATA.${self:custom.stage}}
    LEADERBOARD_DATA: ${self:custom.stage}-leaderboard
    LIQUIDITY_POOL_TOKEN_BALANCES_DATA: ${self:custom.table.LIQUIDITY_POOL_TOKEN_BALANCES_DATA.${self:custom.stage}}
    PRICE_DATA: ${self:custom.table.PRICE_DATA.${self:custom.stage}}
    SETT_SNAPSHOTS_DATA: ${self:custom.table.SETT_SNAPSHOTS_DATA.${self:custom.stage}}
    ACCOUNT_DATA: ${self:custom.table.ACCOUNT_DATA.${self:custom.stage}}
    # General Defintions
    REWARD_DATA: ${self:custom.merkleProofs.${self:custom.stage}}
    BOUNCER_PROOFS: badger-bouncer.json
    STAGE: ${opt:stage, self:provider.stage}

resources:
  Resources:
    accountTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.table.ACCOUNT_DATA.${self:custom.stage}}
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: 'address'
            KeyType: 'HASH'
        AttributeDefinitions:
          - AttributeName: 'address'
            AttributeType: 'S'

    apySnapshotsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.table.APY_SNAPSHOTS_DATA.${self:custom.stage}}
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: 'addressValueSourceType'
            KeyType: 'HASH'
        AttributeDefinitions:
          - AttributeName: 'addressValueSourceType'
            AttributeType: 'S'
          - AttributeName: 'address'
            AttributeType: 'S'
        GlobalSecondaryIndexes:
          - IndexName: IndexApySnapshotsOnAddress
            KeySchema:
              - AttributeName: address
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    settHistoricSnapshots:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.table.SETT_DATA.${self:custom.stage}}
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: 'address'
            KeyType: 'HASH'
          - AttributeName: 'timestamp'
            KeyType: 'RANGE'
        AttributeDefinitions:
          - AttributeName: 'address'
            AttributeType: 'S'
          - AttributeName: 'timestamp'
            AttributeType: 'N'

    priceTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.table.PRICE_DATA.${self:custom.stage}}
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: 'address'
            KeyType: 'HASH'
          - AttributeName: 'updatedAt'
            KeyType: 'RANGE'
        AttributeDefinitions:
          - AttributeName: 'address'
            AttributeType: 'S'
          - AttributeName: 'updatedAt'
            AttributeType: 'N'

    settsSnapshotsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.table.SETT_SNAPSHOTS_DATA.${self:custom.stage}}
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: 'address'
            KeyType: 'HASH'
        AttributeDefinitions:
          - AttributeName: 'address'
            AttributeType: 'S'

    leaderboardTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.stage}-leaderboard
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: 'leaderboard'
            KeyType: 'HASH'
          - AttributeName: 'rank'
            KeyType: 'RANGE'
        AttributeDefinitions:
          - AttributeName: 'leaderboard'
            AttributeType: 'S'
          - AttributeName: 'rank'
            AttributeType: 'N'
          - AttributeName: 'address'
            AttributeType: 'S'
        GlobalSecondaryIndexes:
          - IndexName: IndexLeaderBoardRankOnAddress
            KeySchema:
              - AttributeName: 'address'
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    liquidityPoolTokenBalancesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.table.LIQUIDITY_POOL_TOKEN_BALANCES_DATA.${self:custom.stage}}
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: 'id'
            KeyType: 'HASH'
        AttributeDefinitions:
          - AttributeName: 'id'
            AttributeType: 'S'
          - AttributeName: 'pairId'
            AttributeType: 'S'
          - AttributeName: 'protocol'
            AttributeType: 'S'
        GlobalSecondaryIndexes:
          - IndexName: IndexLiquidityPoolTokenBalancesOnPairIdAndProtocol
            KeySchema:
              - AttributeName: 'pairId'
                KeyType: HASH
              - AttributeName: 'protocol'
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

functions:
  request-handler:
    handler: src/LambdaServer.handler
    timeout: 30
    events:
      - http:
          path: /{proxy+}
          method: any
          cors: true
      - http:
          path: /
          method: any
          cors: true

  index-setts:
    handler: src/indexer/sett-indexer.indexAsset
    timeout: 480
    events:
      - schedule:
          name: ${self:service}-${self:custom.stage}-index-setts
          description: 'index historical data for all setts'
          rate: rate(10 minutes)

  index-apy-snapshots:
    handler: src/indexer/apy-snapshots-indexer.refreshApySnapshots
    timeout: 120
    events:
      - schedule:
          name: ${self:service}-${self:custom.stage}-index-apy-snapshots
          description: 'index data for sett apy'
          rate: rate(1 minute)

  index-prices:
    handler: src/indexer/price-indexer.indexPrices
    timeout: 120
    events:
      - schedule:
          name: ${self:service}-${self:custom.stage}-index-prices
          description: 'index price data for all protocol tokens'
          rate: rate(1 minute)

  index-sett-snapshots:
    handler: src/indexer/sett-snapshots-indexer.refreshSettSnapshots
    timeout: 30
    events:
      - schedule:
          name: ${self:service}-${self:custom.stage}-index-sett-snapshots
          description: 'index data for supported setts'
          rate: rate(1 minute)

  index-leaderboard:
    handler: src/indexer/boost-indexer.indexBoostLeaderBoard
    timeout: 120
    events:
      - schedule:
          name: ${self:service}-${self:custom.stage}-index-leaderboard
          description: 'index leaderboard data from latest badger boosts'
          rate: rate(5 minutes)

  index-token-balances:
    handler: src/indexer/token-balances-indexer.refreshTokenBalances
    timeout: 180
    events:
      - schedule:
          name: ${self:service}-${self:custom.stage}-index-token-balances
          description: 'index token balances from the graph'
          rate: rate(1 minute)

  index-accounts:
    handler: src/indexer/accounts-indexer.refreshUserAccounts
    timeout: 720
    events:
      - schedule:
          name: ${self:service}-${self:custom.stage}-index-accounts
          description: 'index accounts information from the graph'
          rate: rate(7 minutes)
